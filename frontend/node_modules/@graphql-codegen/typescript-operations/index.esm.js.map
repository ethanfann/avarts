{"version":3,"file":"index.esm.js","sources":["../../../dist/plugins/typescript/operations/src/ts-operation-variables-to-object.js","../../../dist/plugins/typescript/operations/src/ts-selection-set-processor.js","../../../dist/plugins/typescript/operations/src/visitor.js","../../../dist/plugins/typescript/operations/src/index.js"],"sourcesContent":["import { TypeScriptOperationVariablesToObject as TSOperationVariablesToObject } from '@graphql-codegen/typescript';\nexport class TypeScriptOperationVariablesToObject extends TSOperationVariablesToObject {\n    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {\n        return fieldType;\n    }\n}\n//# sourceMappingURL=ts-operation-variables-to-object.js.map","import { BaseSelectionSetProcessor, } from '@graphql-codegen/visitor-plugin-common';\nexport class TypeScriptSelectionSetProcessor extends BaseSelectionSetProcessor {\n    transformPrimitiveFields(schemaType, fields) {\n        if (fields.length === 0) {\n            return [];\n        }\n        const parentName = (this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '') +\n            this.config.convertName(schemaType.name, {\n                useTypesPrefix: true,\n            });\n        return [`Pick<${parentName}, ${fields.map(field => `'${field}'`).join(' | ')}>`];\n    }\n    transformTypenameField(type, name) {\n        return [`{ ${name}: ${type} }`];\n    }\n    transformAliasesPrimitiveFields(schemaType, fields) {\n        if (fields.length === 0) {\n            return [];\n        }\n        const parentName = (this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '') +\n            this.config.convertName(schemaType.name, {\n                useTypesPrefix: true,\n            });\n        return [\n            `{ ${fields\n                .map(aliasedField => {\n                const value = aliasedField.fieldName === '__typename'\n                    ? `'${schemaType.name}'`\n                    : `${parentName}['${aliasedField.fieldName}']`;\n                return `${aliasedField.alias}: ${value}`;\n            })\n                .join(', ')} }`,\n        ];\n    }\n    transformLinkFields(fields) {\n        if (fields.length === 0) {\n            return [];\n        }\n        return [`{ ${fields.map(field => `${field.alias || field.name}: ${field.selectionSet}`).join(', ')} }`];\n    }\n}\n//# sourceMappingURL=ts-selection-set-processor.js.map","import { BaseDocumentsVisitor, generateFragmentImportStatement, getConfigValue, normalizeAvoidOptionals, PreResolveTypesProcessor, SelectionSetToObject, wrapTypeWithModifiers, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { isEnumType, isNonNullType } from 'graphql';\nimport { TypeScriptOperationVariablesToObject } from './ts-operation-variables-to-object';\nimport { TypeScriptSelectionSetProcessor } from './ts-selection-set-processor';\nexport class TypeScriptDocumentsVisitor extends BaseDocumentsVisitor {\n    constructor(schema, config, allFragments) {\n        super(config, {\n            noExport: getConfigValue(config.noExport, false),\n            avoidOptionals: normalizeAvoidOptionals(getConfigValue(config.avoidOptionals, false)),\n            immutableTypes: getConfigValue(config.immutableTypes, false),\n            nonOptionalTypename: getConfigValue(config.nonOptionalTypename, false),\n        }, schema);\n        autoBind(this);\n        const wrapOptional = (type) => {\n            const prefix = this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '';\n            return `${prefix}Maybe<${type}>`;\n        };\n        const wrapArray = (type) => {\n            const listModifier = this.config.immutableTypes ? 'ReadonlyArray' : 'Array';\n            return `${listModifier}<${type}>`;\n        };\n        const formatNamedField = (name, type) => {\n            const optional = !this.config.avoidOptionals.field && !!type && !isNonNullType(type);\n            return (this.config.immutableTypes ? `readonly ${name}` : name) + (optional ? '?' : '');\n        };\n        const processorConfig = {\n            namespacedImportName: this.config.namespacedImportName,\n            convertName: this.convertName.bind(this),\n            enumPrefix: this.config.enumPrefix,\n            scalars: this.scalars,\n            formatNamedField,\n            wrapTypeWithModifiers(baseType, type) {\n                return wrapTypeWithModifiers(baseType, type, { wrapOptional, wrapArray });\n            },\n        };\n        const processor = new (config.preResolveTypes ? PreResolveTypesProcessor : TypeScriptSelectionSetProcessor)(processorConfig);\n        this.setSelectionSetHandler(new SelectionSetToObject(processor, this.scalars, this.schema, this.convertName.bind(this), this.getFragmentSuffix.bind(this), allFragments, this.config));\n        const enumsNames = Object.keys(schema.getTypeMap()).filter(typeName => isEnumType(schema.getType(typeName)));\n        this.setVariablesTransformer(new TypeScriptOperationVariablesToObject(this.scalars, this.convertName.bind(this), this.config.avoidOptionals.object, this.config.immutableTypes, this.config.namespacedImportName, enumsNames, this.config.enumPrefix, this.config.enumValues));\n        this._declarationBlockConfig = {\n            ignoreExport: this.config.noExport,\n        };\n    }\n    getImports() {\n        return !this.config.globalNamespace\n            ? this.config.fragmentImports.map(fragmentImport => generateFragmentImportStatement(fragmentImport, 'type'))\n            : [];\n    }\n    getPunctuation(declarationKind) {\n        return ';';\n    }\n    applyVariablesWrapper(variablesBlock) {\n        const prefix = this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '';\n        return `${prefix}Exact<${variablesBlock === '{}' ? `{ [key: string]: never; }` : variablesBlock}>`;\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { visit, concatAST, Kind } from 'graphql';\nimport { TypeScriptDocumentsVisitor } from './visitor';\nimport { optimizeOperations } from '@graphql-codegen/visitor-plugin-common';\nexport const plugin = (schema, rawDocuments, config) => {\n    const documents = config.flattenGeneratedTypes ? optimizeOperations(schema, rawDocuments) : rawDocuments;\n    const allAst = concatAST(documents.map(v => v.document));\n    const allFragments = [\n        ...allAst.definitions.filter(d => d.kind === Kind.FRAGMENT_DEFINITION).map(fragmentDef => ({\n            node: fragmentDef,\n            name: fragmentDef.name.value,\n            onType: fragmentDef.typeCondition.name.value,\n            isExternal: false,\n        })),\n        ...(config.externalFragments || []),\n    ];\n    const visitor = new TypeScriptDocumentsVisitor(schema, config, allFragments);\n    const visitorResult = visit(allAst, {\n        leave: visitor,\n    });\n    let content = visitorResult.definitions.join('\\n');\n    if (config.globalNamespace) {\n        content = `\n    declare global { \n      ${content} \n    }`;\n    }\n    return {\n        prepend: [...visitor.getImports(), ...visitor.getGlobalDeclarations(visitor.config.noExport)],\n        content,\n    };\n};\nexport { TypeScriptDocumentsVisitor };\n//# sourceMappingURL=index.js.map"],"names":["TSOperationVariablesToObject"],"mappings":"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"}