{"version":3,"file":"index.cjs.js","sources":["../../../dist/plugins/typescript/typescript/src/typescript-variables-to-object.js","../../../dist/plugins/typescript/typescript/src/visitor.js","../../../dist/plugins/typescript/typescript/src/introspection-visitor.js","../../../dist/plugins/typescript/typescript/src/index.js"],"sourcesContent":["import { OperationVariablesToObject, } from '@graphql-codegen/visitor-plugin-common';\nimport { Kind } from 'graphql';\nexport class TypeScriptOperationVariablesToObject extends OperationVariablesToObject {\n    constructor(_scalars, _convertName, _avoidOptionals, _immutableTypes, _namespacedImportName = null, _enumNames = [], _enumPrefix = true, _enumValues = {}) {\n        super(_scalars, _convertName, _namespacedImportName, _enumNames, _enumPrefix, _enumValues);\n        this._avoidOptionals = _avoidOptionals;\n        this._immutableTypes = _immutableTypes;\n    }\n    clearOptional(str) {\n        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';\n        const rgx = new RegExp(`^${prefix}Maybe<(.*?)>$`, 'i');\n        if (str.startsWith(`${this._namespacedImportName ? `${this._namespacedImportName}.` : ''}Maybe`)) {\n            return str.replace(rgx, '$1');\n        }\n        return str;\n    }\n    wrapAstTypeWithModifiers(baseType, typeNode) {\n        const prefix = this._namespacedImportName ? `${this._namespacedImportName}.` : '';\n        if (typeNode.kind === Kind.NON_NULL_TYPE) {\n            const type = this.wrapAstTypeWithModifiers(baseType, typeNode.type);\n            return this.clearOptional(type);\n        }\n        else if (typeNode.kind === Kind.LIST_TYPE) {\n            const innerType = this.wrapAstTypeWithModifiers(baseType, typeNode.type);\n            return `${prefix}Maybe<${this._immutableTypes ? 'ReadonlyArray' : 'Array'}<${innerType}>>`;\n        }\n        else {\n            return `${prefix}Maybe<${baseType}>`;\n        }\n    }\n    formatFieldString(fieldName, isNonNullType, hasDefaultValue) {\n        if (!hasDefaultValue && (this._avoidOptionals || isNonNullType)) {\n            return fieldName;\n        }\n        return `${fieldName}?`;\n    }\n    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {\n        if (!hasDefaultValue && isNonNullType) {\n            return this.clearOptional(fieldType);\n        }\n        return fieldType;\n    }\n    getPunctuation() {\n        return ';';\n    }\n}\n//# sourceMappingURL=typescript-variables-to-object.js.map","import { transformComment, wrapWithSingleQuotes, DeclarationBlock, indent, BaseTypesVisitor, getConfigValue, normalizeAvoidOptionals, } from '@graphql-codegen/visitor-plugin-common';\nimport autoBind from 'auto-bind';\nimport { Kind, isEnumType, } from 'graphql';\nimport { TypeScriptOperationVariablesToObject } from './typescript-variables-to-object';\nexport const EXACT_SIGNATURE = `type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };`;\nexport class TsVisitor extends BaseTypesVisitor {\n    constructor(schema, pluginConfig, additionalConfig = {}) {\n        super(schema, pluginConfig, {\n            noExport: getConfigValue(pluginConfig.noExport, false),\n            avoidOptionals: normalizeAvoidOptionals(getConfigValue(pluginConfig.avoidOptionals, false)),\n            maybeValue: getConfigValue(pluginConfig.maybeValue, 'T | null'),\n            constEnums: getConfigValue(pluginConfig.constEnums, false),\n            enumsAsTypes: getConfigValue(pluginConfig.enumsAsTypes, false),\n            futureProofEnums: getConfigValue(pluginConfig.futureProofEnums, false),\n            enumsAsConst: getConfigValue(pluginConfig.enumsAsConst, false),\n            numericEnums: getConfigValue(pluginConfig.numericEnums, false),\n            onlyOperationTypes: getConfigValue(pluginConfig.onlyOperationTypes, false),\n            immutableTypes: getConfigValue(pluginConfig.immutableTypes, false),\n            ...(additionalConfig || {}),\n        });\n        autoBind(this);\n        const enumNames = Object.values(schema.getTypeMap())\n            .filter(isEnumType)\n            .map(type => type.name);\n        this.setArgumentsTransformer(new TypeScriptOperationVariablesToObject(this.scalars, this.convertName, this.config.avoidOptionals.object, this.config.immutableTypes, null, enumNames, pluginConfig.enumPrefix, this.config.enumValues));\n        this.setDeclarationBlockConfig({\n            enumNameValueSeparator: ' =',\n            ignoreExport: this.config.noExport,\n        });\n    }\n    getWrapperDefinitions() {\n        const definitions = [this.getMaybeValue(), this.getExactDefinition()];\n        if (this.config.wrapFieldDefinitions) {\n            definitions.push(this.getFieldWrapperValue());\n        }\n        return definitions;\n    }\n    getExactDefinition() {\n        return `${this.getExportPrefix()}${EXACT_SIGNATURE}`;\n    }\n    getMaybeValue() {\n        return `${this.getExportPrefix()}type Maybe<T> = ${this.config.maybeValue};`;\n    }\n    clearOptional(str) {\n        if (str.startsWith('Maybe')) {\n            return str.replace(/Maybe<(.*?)>$/, '$1');\n        }\n        return str;\n    }\n    getExportPrefix() {\n        if (this.config.noExport) {\n            return '';\n        }\n        return super.getExportPrefix();\n    }\n    NamedType(node, key, parent, path, ancestors) {\n        return `Maybe<${super.NamedType(node, key, parent, path, ancestors)}>`;\n    }\n    ListType(node) {\n        return `Maybe<${super.ListType(node)}>`;\n    }\n    wrapWithListType(str) {\n        return `${this.config.immutableTypes ? 'ReadonlyArray' : 'Array'}<${str}>`;\n    }\n    NonNullType(node) {\n        const baseValue = super.NonNullType(node);\n        return this.clearOptional(baseValue);\n    }\n    FieldDefinition(node, key, parent) {\n        const typeString = node.type;\n        const originalFieldNode = parent[key];\n        const addOptionalSign = !this.config.avoidOptionals.field && originalFieldNode.type.kind !== Kind.NON_NULL_TYPE;\n        const comment = this.getFieldComment(node);\n        const { type } = this.config.declarationKind;\n        return (comment +\n            indent(`${this.config.immutableTypes ? 'readonly ' : ''}${node.name}${addOptionalSign ? '?' : ''}: ${typeString}${this.getPunctuation(type)}`));\n    }\n    InputValueDefinition(node, key, parent) {\n        const originalFieldNode = parent[key];\n        const addOptionalSign = !this.config.avoidOptionals.inputValue && originalFieldNode.type.kind !== Kind.NON_NULL_TYPE;\n        const comment = transformComment(node.description, 1);\n        const { type } = this.config.declarationKind;\n        return (comment +\n            indent(`${this.config.immutableTypes ? 'readonly ' : ''}${node.name}${addOptionalSign ? '?' : ''}: ${node.type}${this.getPunctuation(type)}`));\n    }\n    EnumTypeDefinition(node) {\n        const enumName = node.name;\n        // In case of mapped external enum string\n        if (this.config.enumValues[enumName] && this.config.enumValues[enumName].sourceFile) {\n            return `export { ${this.config.enumValues[enumName].typeIdentifier} };\\n`;\n        }\n        const getValueFromConfig = (enumValue) => {\n            if (this.config.enumValues[enumName] &&\n                this.config.enumValues[enumName].mappedValues &&\n                typeof this.config.enumValues[enumName].mappedValues[enumValue] !== 'undefined') {\n                return this.config.enumValues[enumName].mappedValues[enumValue];\n            }\n            return null;\n        };\n        const withFutureAddedValue = [\n            this.config.futureProofEnums ? [indent('| ' + wrapWithSingleQuotes('%future added value'))] : [],\n        ];\n        const enumTypeName = this.convertName(node, { useTypesPrefix: this.config.enumPrefix });\n        if (this.config.enumsAsTypes) {\n            return new DeclarationBlock(this._declarationBlockConfig)\n                .export()\n                .asKind('type')\n                .withComment(node.description)\n                .withName(enumTypeName)\n                .withContent('\\n' +\n                node.values\n                    .map(enumOption => {\n                    const name = enumOption.name;\n                    const enumValue = getValueFromConfig(name) || name;\n                    const comment = transformComment(enumOption.description, 1);\n                    return comment + indent('| ' + wrapWithSingleQuotes(enumValue));\n                })\n                    .concat(...withFutureAddedValue)\n                    .join('\\n')).string;\n        }\n        if (this.config.numericEnums) {\n            const block = new DeclarationBlock(this._declarationBlockConfig)\n                .export()\n                .withComment(node.description)\n                .withName(enumTypeName)\n                .asKind('enum')\n                .withBlock(node.values\n                .map((enumOption, i) => {\n                const valueFromConfig = getValueFromConfig(enumOption.name);\n                const enumValue = valueFromConfig || i;\n                const comment = transformComment(enumOption.description, 1);\n                return comment + indent(enumOption.name) + ` = ${enumValue}`;\n            })\n                .concat(...withFutureAddedValue)\n                .join(',\\n')).string;\n            return block;\n        }\n        if (this.config.enumsAsConst) {\n            const typeName = `export type ${enumTypeName} = typeof ${enumTypeName}[keyof typeof ${enumTypeName}];`;\n            const enumAsConst = new DeclarationBlock({\n                ...this._declarationBlockConfig,\n                blockTransformer: block => {\n                    return block + ' as const';\n                },\n            })\n                .export()\n                .asKind('const')\n                .withName(enumTypeName)\n                .withComment(node.description)\n                .withBlock(node.values\n                .map(enumOption => {\n                const optionName = this.convertName(enumOption, { useTypesPrefix: false, transformUnderscore: true });\n                const comment = transformComment(enumOption.description, 1);\n                const name = enumOption.name;\n                const enumValue = getValueFromConfig(name) || name;\n                return comment + indent(`${optionName}: ${wrapWithSingleQuotes(enumValue)}`);\n            })\n                .join(',\\n')).string;\n            return [enumAsConst, typeName].join('\\n');\n        }\n        return new DeclarationBlock(this._declarationBlockConfig)\n            .export()\n            .asKind(this.config.constEnums ? 'const enum' : 'enum')\n            .withName(enumTypeName)\n            .withComment(node.description)\n            .withBlock(this.buildEnumValuesBlock(enumName, node.values)).string;\n    }\n    getPunctuation(declarationKind) {\n        return ';';\n    }\n}\n//# sourceMappingURL=visitor.js.map","import { TsVisitor } from './visitor';\nimport autoBind from 'auto-bind';\nexport class TsIntrospectionVisitor extends TsVisitor {\n    constructor(schema, pluginConfig = {}, typesToInclude) {\n        super(schema, pluginConfig);\n        this.typesToInclude = [];\n        this.typesToInclude = typesToInclude;\n        autoBind(this);\n    }\n    DirectiveDefinition() {\n        return null;\n    }\n    ObjectTypeDefinition(node, key, parent) {\n        const name = node.name;\n        if (this.typesToInclude.some(type => type.name === name)) {\n            return super.ObjectTypeDefinition(node, key, parent);\n        }\n        return null;\n    }\n    EnumTypeDefinition(node) {\n        const name = node.name;\n        if (this.typesToInclude.some(type => type.name === name)) {\n            return super.EnumTypeDefinition(node);\n        }\n        return null;\n    }\n}\n//# sourceMappingURL=introspection-visitor.js.map","import { parse, printSchema, visit, TypeInfo, visitWithTypeInfo, getNamedType, isIntrospectionType, printIntrospectionSchema, isObjectType, } from 'graphql';\nimport { TsVisitor } from './visitor';\nimport { TsIntrospectionVisitor } from './introspection-visitor';\nexport * from './typescript-variables-to-object';\nexport * from './visitor';\nexport * from './config';\nexport * from './introspection-visitor';\nexport const plugin = (schema, documents, config) => {\n    const visitor = new TsVisitor(schema, config);\n    const printedSchema = printSchema(schema);\n    const astNode = parse(printedSchema);\n    const visitorResult = visit(astNode, { leave: visitor });\n    const introspectionDefinitions = includeIntrospectionDefinitions(schema, documents, config);\n    const scalars = visitor.scalarsDefinition;\n    return {\n        prepend: [...visitor.getEnumsImports(), ...visitor.getScalarsImports(), ...visitor.getWrapperDefinitions()],\n        content: [scalars, ...visitorResult.definitions, ...introspectionDefinitions].join('\\n'),\n    };\n};\nexport function includeIntrospectionDefinitions(schema, documents, config) {\n    const typeInfo = new TypeInfo(schema);\n    const usedTypes = [];\n    const documentsVisitor = visitWithTypeInfo(typeInfo, {\n        Field() {\n            const type = getNamedType(typeInfo.getType());\n            if (isIntrospectionType(type) && !usedTypes.includes(type)) {\n                usedTypes.push(type);\n            }\n        },\n    });\n    documents.forEach(doc => visit(doc.document, documentsVisitor));\n    const typesToInclude = [];\n    usedTypes.forEach(type => {\n        collectTypes(type);\n    });\n    const visitor = new TsIntrospectionVisitor(schema, config, typesToInclude);\n    const result = visit(parse(printIntrospectionSchema(schema)), { leave: visitor });\n    // recursively go through each `usedTypes` and their children and collect all used types\n    // we don't care about Interfaces, Unions and others, but Objects and Enums\n    function collectTypes(type) {\n        if (typesToInclude.includes(type)) {\n            return;\n        }\n        typesToInclude.push(type);\n        if (isObjectType(type)) {\n            const fields = type.getFields();\n            Object.keys(fields).forEach(key => {\n                const field = fields[key];\n                const type = getNamedType(field.type);\n                collectTypes(type);\n            });\n        }\n    }\n    return result.definitions;\n}\n//# sourceMappingURL=index.js.map"],"names":["OperationVariablesToObject","Kind","BaseTypesVisitor","getConfigValue","normalizeAvoidOptionals","isEnumType","indent","transformComment","wrapWithSingleQuotes","DeclarationBlock","printSchema","parse","visit","TypeInfo","visitWithTypeInfo","getNamedType","isIntrospectionType","printIntrospectionSchema","isObjectType"],"mappings":"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"}