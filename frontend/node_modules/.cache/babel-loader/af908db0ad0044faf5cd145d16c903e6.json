{"ast":null,"code":"const polyline = require('@mapbox/polyline');\n\nconst urlencode = require('urlencode');\n\nconst {\n  createSpectrum,\n  rgbToHexString,\n  hexStringToRGB\n} = require('./color');\n\nrequire('dotenv').config();\n\nconst startColor = '#FF512F';\nconst endColor = '#F09819';\nconst strokeWidth = 4;\nconst mapboxToken = process.env.REACT_APP_MAPBOX_TOKEN;\nconst colorA = hexStringToRGB(startColor);\nconst colorB = hexStringToRGB(endColor);\n\nfunction makePathWithGradient(coords) {\n  const pathStrings = [];\n  const spectrumColors = createSpectrum(colorA, colorB, coords.length - 1);\n\n  for (let i = 0; i < coords.length - 1; i++) {\n    const path = polyline.encode([[coords[i].x, coords[i].y], [coords[i + 1].x, coords[i + 1].y]]);\n    pathStrings.push(`path-${strokeWidth}+${spectrumColors[i]}(${path})`); // format from https://docs.mapbox.com/api/maps/#path\n  }\n\n  return pathStrings.join(',');\n}\n\nfunction pathWithGradient(coords) {\n  const firstCoord = coords[0];\n  const lastCoord = coords[coords.length - 1];\n  const startMarker = `pin-s-a+${rgbToHexString(colorA)}(${firstCoord.y},${firstCoord.x})`;\n  const endMarker = `pin-s-b+${rgbToHexString(colorB)}(${lastCoord.y},${lastCoord.x})`;\n  return makePathWithGradient(coords) + ',' + startMarker + ',' + endMarker;\n}\n\nexport function staticRideImg(coords) {\n  const newCoords = coords.map(coord => ({\n    x: coord[1],\n    y: coord[0]\n  }));\n  return `https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/${urlencode(pathWithGradient(newCoords))}/auto/700x400?access_token=${mapboxToken}`;\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/utils/mapbox.ts"],"names":["polyline","require","urlencode","createSpectrum","rgbToHexString","hexStringToRGB","config","startColor","endColor","strokeWidth","mapboxToken","process","env","REACT_APP_MAPBOX_TOKEN","colorA","colorB","makePathWithGradient","coords","pathStrings","spectrumColors","length","i","path","encode","x","y","push","join","pathWithGradient","firstCoord","lastCoord","startMarker","endMarker","staticRideImg","newCoords","map","coord"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA,cAAF;AAAkBC,EAAAA,cAAlB;AAAkCC,EAAAA;AAAlC,IAAqDJ,OAAO,CAAC,SAAD,CAAlE;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBK,MAAlB;;AAOA,MAAMC,UAAU,GAAG,SAAnB;AACA,MAAMC,QAAQ,GAAG,SAAjB;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAAhC;AAEA,MAAMC,MAAM,GAAGT,cAAc,CAACE,UAAD,CAA7B;AACA,MAAMQ,MAAM,GAAGV,cAAc,CAACG,QAAD,CAA7B;;AAEA,SAASQ,oBAAT,CAA8BC,MAA9B,EAAoD;AAClD,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,cAAc,GAAGhB,cAAc,CAACW,MAAD,EAASC,MAAT,EAAiBE,MAAM,CAACG,MAAP,GAAgB,CAAjC,CAArC;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACG,MAAP,GAAgB,CAApC,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,UAAMC,IAAI,GAAGtB,QAAQ,CAACuB,MAAT,CAAgB,CAC3B,CAACN,MAAM,CAACI,CAAD,CAAN,CAAUG,CAAX,EAAcP,MAAM,CAACI,CAAD,CAAN,CAAUI,CAAxB,CAD2B,EAE3B,CAACR,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAcG,CAAf,EAAkBP,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,CAAcI,CAAhC,CAF2B,CAAhB,CAAb;AAIAP,IAAAA,WAAW,CAACQ,IAAZ,CAAkB,QAAOjB,WAAY,IAAGU,cAAc,CAACE,CAAD,CAAI,IAAGC,IAAK,GAAlE,EAL0C,CAK4B;AACvE;;AAED,SAAOJ,WAAW,CAACS,IAAZ,CAAiB,GAAjB,CAAP;AACD;;AAED,SAASC,gBAAT,CAA0BX,MAA1B,EAAgD;AAC9C,QAAMY,UAAiB,GAAGZ,MAAM,CAAC,CAAD,CAAhC;AACA,QAAMa,SAAS,GAAGb,MAAM,CAACA,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAAxB;AACA,QAAMW,WAAW,GAAI,WAAU3B,cAAc,CAACU,MAAD,CAAS,IAAGe,UAAU,CAACJ,CAAE,IACpEI,UAAU,CAACL,CACZ,GAFD;AAGA,QAAMQ,SAAS,GAAI,WAAU5B,cAAc,CAACW,MAAD,CAAS,IAAGe,SAAS,CAACL,CAAE,IACjEK,SAAS,CAACN,CACX,GAFD;AAGA,SAAOR,oBAAoB,CAACC,MAAD,CAApB,GAA+B,GAA/B,GAAqCc,WAArC,GAAmD,GAAnD,GAAyDC,SAAhE;AACD;;AAED,OAAO,SAASC,aAAT,CAAuBhB,MAAvB,EAAqD;AAC1D,QAAMiB,SAAuB,GAAGjB,MAAM,CAACkB,GAAP,CAAYC,KAAD,KAAiB;AAC1DZ,IAAAA,CAAC,EAAEY,KAAK,CAAC,CAAD,CADkD;AAE1DX,IAAAA,CAAC,EAAEW,KAAK,CAAC,CAAD;AAFkD,GAAjB,CAAX,CAAhC;AAKA,SAAQ,8DAA6DlC,SAAS,CAC5E0B,gBAAgB,CAACM,SAAD,CAD4D,CAE5E,8BAA6BxB,WAAY,EAF3C;AAGD","sourcesContent":["const polyline = require('@mapbox/polyline')\nconst urlencode = require('urlencode')\nconst { createSpectrum, rgbToHexString, hexStringToRGB } = require('./color')\nrequire('dotenv').config()\n\ntype Coord = {\n  x: number\n  y: number\n}\n\nconst startColor = '#FF512F'\nconst endColor = '#F09819'\nconst strokeWidth = 4\nconst mapboxToken = process.env.REACT_APP_MAPBOX_TOKEN\n\nconst colorA = hexStringToRGB(startColor)\nconst colorB = hexStringToRGB(endColor)\n\nfunction makePathWithGradient(coords: Array<Coord>) {\n  const pathStrings = []\n  const spectrumColors = createSpectrum(colorA, colorB, coords.length - 1)\n\n  for (let i = 0; i < coords.length - 1; i++) {\n    const path = polyline.encode([\n      [coords[i].x, coords[i].y],\n      [coords[i + 1].x, coords[i + 1].y],\n    ])\n    pathStrings.push(`path-${strokeWidth}+${spectrumColors[i]}(${path})`) // format from https://docs.mapbox.com/api/maps/#path\n  }\n\n  return pathStrings.join(',')\n}\n\nfunction pathWithGradient(coords: Array<Coord>) {\n  const firstCoord: Coord = coords[0]\n  const lastCoord = coords[coords.length - 1]\n  const startMarker = `pin-s-a+${rgbToHexString(colorA)}(${firstCoord.y},${\n    firstCoord.x\n  })`\n  const endMarker = `pin-s-b+${rgbToHexString(colorB)}(${lastCoord.y},${\n    lastCoord.x\n  })`\n  return makePathWithGradient(coords) + ',' + startMarker + ',' + endMarker\n}\n\nexport function staticRideImg(coords: Array<Array<number>>) {\n  const newCoords: Array<Coord> = coords.map((coord: any) => ({\n    x: coord[1],\n    y: coord[0],\n  }))\n\n  return `https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/${urlencode(\n    pathWithGradient(newCoords)\n  )}/auto/700x400?access_token=${mapboxToken}`\n}\n"]},"metadata":{},"sourceType":"module"}