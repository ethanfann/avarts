{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer; // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\n\nfunction Utf7Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\n\n;\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true; // -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n  this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function (str) {\n  // Naive implementation.\n  // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n  return Buffer.from(str.replace(nonDirectChars, function (chunk) {\n    return \"+\" + (chunk === '+' ? '' : this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) + \"-\";\n  }.bind(this)));\n};\n\nUtf7Encoder.prototype.end = function () {}; // -- Decoding\n\n\nfunction Utf7Decoder(options, codec) {\n  this.iconv = codec.iconv;\n  this.inBase64 = false;\n  this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\n\nfor (var i = 0; i < 256; i++) base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0),\n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function (buf) {\n  var res = \"\",\n      lastI = 0,\n      inBase64 = this.inBase64,\n      base64Accum = this.base64Accum; // The decoder is more involved as we must handle chunks in stream.\n\n  for (var i = 0; i < buf.length; i++) {\n    if (!inBase64) {\n      // We're in direct mode.\n      // Write direct chars until '+'\n      if (buf[i] == plusChar) {\n        res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n\n        lastI = i + 1;\n        inBase64 = true;\n      }\n    } else {\n      // We decode base64.\n      if (!base64Chars[buf[i]]) {\n        // Base64 ended.\n        if (i == lastI && buf[i] == minusChar) {\n          // \"+-\" -> \"+\"\n          res += \"+\";\n        } else {\n          var b64str = base64Accum + buf.slice(lastI, i).toString();\n          res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n        }\n\n        if (buf[i] != minusChar) // Minus is absorbed after base64.\n          i--;\n        lastI = i + 1;\n        inBase64 = false;\n        base64Accum = '';\n      }\n    }\n  }\n\n  if (!inBase64) {\n    res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n  } else {\n    var b64str = base64Accum + buf.slice(lastI).toString();\n    var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n\n    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n\n    b64str = b64str.slice(0, canBeDecoded);\n    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n  }\n\n  this.inBase64 = inBase64;\n  this.base64Accum = base64Accum;\n  return res;\n};\n\nUtf7Decoder.prototype.end = function () {\n  var res = \"\";\n  if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n  this.inBase64 = false;\n  this.base64Accum = '';\n  return res;\n}; // UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\n\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\n\n;\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true; // -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n  this.iconv = codec.iconv;\n  this.inBase64 = false;\n  this.base64Accum = Buffer.alloc(6);\n  this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function (str) {\n  var inBase64 = this.inBase64,\n      base64Accum = this.base64Accum,\n      base64AccumIdx = this.base64AccumIdx,\n      buf = Buffer.alloc(str.length * 5 + 10),\n      bufIdx = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var uChar = str.charCodeAt(i);\n\n    if (0x20 <= uChar && uChar <= 0x7E) {\n      // Direct character or '&'.\n      if (inBase64) {\n        if (base64AccumIdx > 0) {\n          bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n          base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n\n        inBase64 = false;\n      }\n\n      if (!inBase64) {\n        buf[bufIdx++] = uChar; // Write direct character\n\n        if (uChar === andChar) // Ampersand -> '&-'\n          buf[bufIdx++] = minusChar;\n      }\n    } else {\n      // Non-direct character\n      if (!inBase64) {\n        buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n\n        inBase64 = true;\n      }\n\n      if (inBase64) {\n        base64Accum[base64AccumIdx++] = uChar >> 8;\n        base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n        if (base64AccumIdx == base64Accum.length) {\n          bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n          base64AccumIdx = 0;\n        }\n      }\n    }\n  }\n\n  this.inBase64 = inBase64;\n  this.base64AccumIdx = base64AccumIdx;\n  return buf.slice(0, bufIdx);\n};\n\nUtf7IMAPEncoder.prototype.end = function () {\n  var buf = Buffer.alloc(10),\n      bufIdx = 0;\n\n  if (this.inBase64) {\n    if (this.base64AccumIdx > 0) {\n      bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n      this.base64AccumIdx = 0;\n    }\n\n    buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n\n    this.inBase64 = false;\n  }\n\n  return buf.slice(0, bufIdx);\n}; // -- Decoding\n\n\nfunction Utf7IMAPDecoder(options, codec) {\n  this.iconv = codec.iconv;\n  this.inBase64 = false;\n  this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function (buf) {\n  var res = \"\",\n      lastI = 0,\n      inBase64 = this.inBase64,\n      base64Accum = this.base64Accum; // The decoder is more involved as we must handle chunks in stream.\n  // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n  for (var i = 0; i < buf.length; i++) {\n    if (!inBase64) {\n      // We're in direct mode.\n      // Write direct chars until '&'\n      if (buf[i] == andChar) {\n        res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n\n        lastI = i + 1;\n        inBase64 = true;\n      }\n    } else {\n      // We decode base64.\n      if (!base64IMAPChars[buf[i]]) {\n        // Base64 ended.\n        if (i == lastI && buf[i] == minusChar) {\n          // \"&-\" -> \"&\"\n          res += \"&\";\n        } else {\n          var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n          res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n        }\n\n        if (buf[i] != minusChar) // Minus may be absorbed after base64.\n          i--;\n        lastI = i + 1;\n        inBase64 = false;\n        base64Accum = '';\n      }\n    }\n  }\n\n  if (!inBase64) {\n    res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n  } else {\n    var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n    var canBeDecoded = b64str.length - b64str.length % 8; // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n\n    base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n\n    b64str = b64str.slice(0, canBeDecoded);\n    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n  }\n\n  this.inBase64 = inBase64;\n  this.base64Accum = base64Accum;\n  return res;\n};\n\nUtf7IMAPDecoder.prototype.end = function () {\n  var res = \"\";\n  if (this.inBase64 && this.base64Accum.length > 0) res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n  this.inBase64 = false;\n  this.base64Accum = '';\n  return res;\n};","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/iconv-lite/encodings/utf7.js"],"names":["Buffer","require","exports","utf7","Utf7Codec","unicode11utf7","codecOptions","iconv","prototype","encoder","Utf7Encoder","decoder","Utf7Decoder","bomAware","nonDirectChars","options","codec","write","str","from","replace","chunk","encode","toString","bind","end","inBase64","base64Accum","base64Regex","base64Chars","i","test","String","fromCharCode","plusChar","charCodeAt","minusChar","andChar","buf","res","lastI","length","decode","slice","b64str","canBeDecoded","utf7imap","Utf7IMAPCodec","Utf7IMAPEncoder","Utf7IMAPDecoder","alloc","base64AccumIdx","bufIdx","uChar","base64IMAPChars"],"mappings":"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","sourcesContent":["\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n"]},"metadata":{},"sourceType":"script"}