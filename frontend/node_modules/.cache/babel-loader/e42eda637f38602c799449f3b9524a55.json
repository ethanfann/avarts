{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/generated/graphql.tsx\";\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n  }\n}\n    `;\nexport const LoginComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: LoginDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 7\n  }\n}));\nexport function withLogin(operationOptions) {\n  return ApolloReactHoc.withMutation(LoginDocument, {\n    alias: 'login',\n    ...operationOptions\n  });\n}\n;\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\n\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport const MeDocument = gql`\n    query me {\n  me {\n    id\n    name\n    email\n    img\n  }\n}\n    `;\nexport const MeComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Query, Object.assign({\n  query: MeDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 7\n  }\n}));\nexport function withMe(operationOptions) {\n  return ApolloReactHoc.withQuery(MeDocument, {\n    alias: 'me',\n    ...operationOptions\n  });\n}\n;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/generated/graphql.tsx"],"names":["gql","React","ApolloReactComponents","ApolloReactHoc","ApolloReactHooks","LoginDocument","LoginComponent","props","withLogin","operationOptions","withMutation","alias","useLoginMutation","baseOptions","useMutation","MeDocument","MeComponent","withMe","withQuery","useMeQuery","useQuery","useMeLazyQuery","useLazyQuery"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,qBAAZ,MAAuC,0BAAvC;AACA,OAAO,KAAKC,cAAZ,MAAgC,mBAAhC;AACA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAkLA,OAAO,MAAMC,aAAa,GAAGL,GAAI;;;;;;KAA1B;AAUH,OAAO,MAAMM,cAAc,GAAIC,KAAD,iBAC5B,oBAAC,qBAAD,CAAuB,QAAvB;AAAuE,EAAA,QAAQ,EAAEF;AAAjF,GAAoGE,KAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAOX,OAAO,SAASC,SAAT,CAAkFC,gBAAlF,EAIgC;AACnC,SAAON,cAAc,CAACO,YAAf,CAA+GL,aAA/G,EAA8H;AACnIM,IAAAA,KAAK,EAAE,OAD4H;AAEnI,OAAGF;AAFgI,GAA9H,CAAP;AAIH;AAAA;AAED;;;;;;;;;;;;;;;;;;;AAkBA,OAAO,SAASG,gBAAT,CAA0BC,WAA1B,EAAqH;AACpH,SAAOT,gBAAgB,CAACU,WAAjB,CAAoET,aAApE,EAAmFQ,WAAnF,CAAP;AACD;AAIP,OAAO,MAAME,UAAU,GAAGf,GAAI;;;;;;;;;KAAvB;AAYH,OAAO,MAAMgB,WAAW,GAAIT,KAAD,iBACzB,oBAAC,qBAAD,CAAuB,KAAvB;AAAwD,EAAA,KAAK,EAAEQ;AAA/D,GAA+ER,KAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAOX,OAAO,SAASU,MAAT,CAA6ER,gBAA7E,EAI6B;AAChC,SAAON,cAAc,CAACe,SAAf,CAA6FH,UAA7F,EAAyG;AAC9GJ,IAAAA,KAAK,EAAE,IADuG;AAE9G,OAAGF;AAF2G,GAAzG,CAAP;AAIH;AAAA;AAED;;;;;;;;;;;;;;;;AAeA,OAAO,SAASU,UAAT,CAAoBN,WAApB,EAAgG;AAC/F,SAAOT,gBAAgB,CAACgB,QAAjB,CAAqDL,UAArD,EAAiEF,WAAjE,CAAP;AACD;AACP,OAAO,SAASQ,cAAT,CAAwBR,WAAxB,EAAwG;AACrG,SAAOT,gBAAgB,CAACkB,YAAjB,CAAyDP,UAAzD,EAAqEF,WAArE,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n  /** Represents untyped JSON */\n  JSON: any;\n};\n\nexport type Activity = {\n  __typename?: 'Activity';\n  comments: Array<ActivityComment>;\n  createdAt: Scalars['ISO8601DateTime'];\n  description: Scalars['String'];\n  geoJson: Scalars['JSON'];\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId: Scalars['ID'];\n};\n\nexport type ActivityComment = {\n  __typename?: 'ActivityComment';\n  activityId: Scalars['ID'];\n  comment: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  updatedAt: Scalars['ISO8601DateTime'];\n  userId: Scalars['ID'];\n};\n\n\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  /** Login for users */\n  login?: Maybe<User>;\n  /** Logout for users */\n  logout?: Maybe<Scalars['Boolean']>;\n  /** Unlock the user account */\n  resendUnlockInstructions: Scalars['Boolean'];\n  /** Set the new password */\n  resetPassword?: Maybe<Scalars['Boolean']>;\n  /** Send password reset instructions to users email */\n  sendResetPasswordInstructions?: Maybe<Scalars['Boolean']>;\n  /** Sign up for users */\n  signUp?: Maybe<User>;\n  /** JWT token login */\n  tokenLogin?: Maybe<User>;\n  /** Unlock the user account */\n  unlock: Scalars['Boolean'];\n  /** Update user */\n  updateUser?: Maybe<User>;\n  upload?: Maybe<Activity>;\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationResendUnlockInstructionsArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n};\n\n\nexport type MutationSendResetPasswordInstructionsArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationSignUpArgs = {\n  attributes: UserInput;\n};\n\n\nexport type MutationUnlockArgs = {\n  unlockToken: Scalars['String'];\n};\n\n\nexport type MutationUpdateUserArgs = {\n  password?: Maybe<Scalars['String']>;\n  passwordConfirmation?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUploadArgs = {\n  description: Scalars['String'];\n  geoJson: Scalars['JSON'];\n  title: Scalars['String'];\n  userId: Scalars['ID'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Returns the activities belonging to the specified user_id */\n  activitiesByUserId?: Maybe<Array<Activity>>;\n  /** Returns the current user */\n  me?: Maybe<User>;\n};\n\n\nexport type QueryActivitiesByUserIdArgs = {\n  userId: Scalars['ID'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  createdAt: Scalars['ISO8601DateTime'];\n  email?: Maybe<Scalars['String']>;\n  firstName: Scalars['String'];\n  id: Scalars['ID'];\n  img: Scalars['String'];\n  lastName: Scalars['String'];\n  latestActivity: Activity;\n  name: Scalars['String'];\n  token: Scalars['String'];\n  updatedAt: Scalars['ISO8601DateTime'];\n};\n\n/** Attributes to create a user. */\nexport type UserInput = {\n  /** Email of user */\n  email: Scalars['String'];\n  /** Firstname of user */\n  firstName: Scalars['String'];\n  /** Lastname of user */\n  lastName: Scalars['String'];\n  /** Password of user */\n  password: Scalars['String'];\n  /** Password confirmation */\n  passwordConfirmation: Scalars['String'];\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'token'>\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email' | 'img'>\n  )> }\n);\n\n\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n  }\n}\n    `;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\nexport type LoginComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LoginMutation, LoginMutationVariables>, 'mutation'>;\n\n    export const LoginComponent = (props: LoginComponentProps) => (\n      <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables> mutation={LoginDocument} {...props} />\n    );\n    \nexport type LoginProps<TChildProps = {}, TDataName extends string = 'mutate'> = {\n      [key in TDataName]: ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>\n    } & TChildProps;\nexport function withLogin<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LoginMutation,\n  LoginMutationVariables,\n  LoginProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withMutation<TProps, LoginMutation, LoginMutationVariables, LoginProps<TChildProps, TDataName>>(LoginDocument, {\n      alias: 'login',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MeDocument = gql`\n    query me {\n  me {\n    id\n    name\n    email\n    img\n  }\n}\n    `;\nexport type MeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<MeQuery, MeQueryVariables>, 'query'>;\n\n    export const MeComponent = (props: MeComponentProps) => (\n      <ApolloReactComponents.Query<MeQuery, MeQueryVariables> query={MeDocument} {...props} />\n    );\n    \nexport type MeProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<MeQuery, MeQueryVariables>\n    } & TChildProps;\nexport function withMe<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  MeQuery,\n  MeQueryVariables,\n  MeProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, MeQuery, MeQueryVariables, MeProps<TChildProps, TDataName>>(MeDocument, {\n      alias: 'me',\n      ...operationOptions\n    });\n};\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;"]},"metadata":{},"sourceType":"module"}