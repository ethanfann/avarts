{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/generated/graphql.tsx\";\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const SigninDocument = gql`\n    mutation signin($email: String!, $password: String!) {\n  signin(input: {credentials: {email: $email, password: $password}}) {\n    token\n    user {\n      id\n      name\n    }\n  }\n}\n    `;\nexport const SigninComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: SigninDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 7\n  }\n}));\nexport function withSignin(operationOptions) {\n  return ApolloReactHoc.withMutation(SigninDocument, {\n    alias: 'signin',\n    ...operationOptions\n  });\n}\n;\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\n\nexport function useSigninMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SigninDocument, baseOptions);\n}\nexport const SignupDocument = gql`\n    mutation signup($email: String!, $password: String!, $name: String!) {\n  signup(input: {name: $name, authProvider: {credentials: {email: $email, password: $password}}}) {\n    id\n    name\n    email\n  }\n}\n    `;\nexport const SignupComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: SignupDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 7\n  }\n}));\nexport function withSignup(operationOptions) {\n  return ApolloReactHoc.withMutation(SignupDocument, {\n    alias: 'signup',\n    ...operationOptions\n  });\n}\n;\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      name: // value for 'name'\n *   },\n * });\n */\n\nexport function useSignupMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SignupDocument, baseOptions);\n}\nexport const CurrentUserDocument = gql`\n    query currentUser {\n  currentUser {\n    id\n    name\n  }\n}\n    `;\nexport const CurrentUserComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Query, Object.assign({\n  query: CurrentUserDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 7\n  }\n}));\nexport function withCurrentUser(operationOptions) {\n  return ApolloReactHoc.withQuery(CurrentUserDocument, {\n    alias: 'currentUser',\n    ...operationOptions\n  });\n}\n;\n/**\n * __useCurrentUserQuery__\n *\n * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrentUserQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useCurrentUserQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(CurrentUserDocument, baseOptions);\n}\nexport function useCurrentUserLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(CurrentUserDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/generated/graphql.tsx"],"names":["gql","React","ApolloReactComponents","ApolloReactHoc","ApolloReactHooks","SigninDocument","SigninComponent","props","withSignin","operationOptions","withMutation","alias","useSigninMutation","baseOptions","useMutation","SignupDocument","SignupComponent","withSignup","useSignupMutation","CurrentUserDocument","CurrentUserComponent","withCurrentUser","withQuery","useCurrentUserQuery","useQuery","useCurrentUserLazyQuery","useLazyQuery"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,qBAAZ,MAAuC,0BAAvC;AACA,OAAO,KAAKC,cAAZ,MAAgC,mBAAhC;AACA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AA2HA,OAAO,MAAMC,cAAc,GAAGL,GAAI;;;;;;;;;;KAA3B;AAcH,OAAO,MAAMM,eAAe,GAAIC,KAAD,iBAC7B,oBAAC,qBAAD,CAAuB,QAAvB;AAAyE,EAAA,QAAQ,EAAEF;AAAnF,GAAuGE,KAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAOX,OAAO,SAASC,UAAT,CAAmFC,gBAAnF,EAIiC;AACpC,SAAON,cAAc,CAACO,YAAf,CAAkHL,cAAlH,EAAkI;AACvIM,IAAAA,KAAK,EAAE,QADgI;AAEvI,OAAGF;AAFoI,GAAlI,CAAP;AAIH;AAAA;AAED;;;;;;;;;;;;;;;;;;;AAkBA,OAAO,SAASG,iBAAT,CAA2BC,WAA3B,EAAwH;AACvH,SAAOT,gBAAgB,CAACU,WAAjB,CAAsET,cAAtE,EAAsFQ,WAAtF,CAAP;AACD;AAIP,OAAO,MAAME,cAAc,GAAGf,GAAI;;;;;;;;KAA3B;AAYH,OAAO,MAAMgB,eAAe,GAAIT,KAAD,iBAC7B,oBAAC,qBAAD,CAAuB,QAAvB;AAAyE,EAAA,QAAQ,EAAEQ;AAAnF,GAAuGR,KAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAOX,OAAO,SAASU,UAAT,CAAmFR,gBAAnF,EAIiC;AACpC,SAAON,cAAc,CAACO,YAAf,CAAkHK,cAAlH,EAAkI;AACvIJ,IAAAA,KAAK,EAAE,QADgI;AAEvI,OAAGF;AAFoI,GAAlI,CAAP;AAIH;AAAA;AAED;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,SAASS,iBAAT,CAA2BL,WAA3B,EAAwH;AACvH,SAAOT,gBAAgB,CAACU,WAAjB,CAAsEC,cAAtE,EAAsFF,WAAtF,CAAP;AACD;AAIP,OAAO,MAAMM,mBAAmB,GAAGnB,GAAI;;;;;;;KAAhC;AAUH,OAAO,MAAMoB,oBAAoB,GAAIb,KAAD,iBAClC,oBAAC,qBAAD,CAAuB,KAAvB;AAA0E,EAAA,KAAK,EAAEY;AAAjF,GAA0GZ,KAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAOX,OAAO,SAASc,eAAT,CAAsFZ,gBAAtF,EAIsC;AACzC,SAAON,cAAc,CAACmB,SAAf,CAAwHH,mBAAxH,EAA6I;AAClJR,IAAAA,KAAK,EAAE,aAD2I;AAElJ,OAAGF;AAF+I,GAA7I,CAAP;AAIH;AAAA;AAED;;;;;;;;;;;;;;;;AAeA,OAAO,SAASc,mBAAT,CAA6BV,WAA7B,EAA2H;AAC1H,SAAOT,gBAAgB,CAACoB,QAAjB,CAAuEL,mBAAvE,EAA4FN,WAA5F,CAAP;AACD;AACP,OAAO,SAASY,uBAAT,CAAiCZ,WAAjC,EAAmI;AAChI,SAAOT,gBAAgB,CAACsB,YAAjB,CAA2EP,mBAA3E,EAAgGN,WAAhG,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Auth_Provider_Credentials = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type AuthProviderSignupData = {\n  credentials?: Maybe<Auth_Provider_Credentials>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  signin?: Maybe<SigninPayload>;\n  signup?: Maybe<User>;\n  /** An example field added by the generator */\n  testField: Scalars['String'];\n};\n\n\nexport type MutationSigninArgs = {\n  input: SigninInput;\n};\n\n\nexport type MutationSignupArgs = {\n  input: SignupInput;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  currentUser?: Maybe<User>;\n  /** An example field added by the generator */\n  testField: Scalars['String'];\n};\n\n/** Autogenerated input type of Signin */\nexport type SigninInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  credentials?: Maybe<Auth_Provider_Credentials>;\n};\n\n/** Autogenerated return type of Signin */\nexport type SigninPayload = {\n  __typename?: 'SigninPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  token?: Maybe<Scalars['String']>;\n  user?: Maybe<User>;\n};\n\n/** Autogenerated input type of Signup */\nexport type SignupInput = {\n  authProvider?: Maybe<AuthProviderSignupData>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  email: Scalars['String'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n};\n\nexport type SigninMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type SigninMutation = (\n  { __typename?: 'Mutation' }\n  & { signin?: Maybe<(\n    { __typename?: 'SigninPayload' }\n    & Pick<SigninPayload, 'token'>\n    & { user?: Maybe<(\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'name'>\n    )> }\n  )> }\n);\n\nexport type SignupMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  name: Scalars['String'];\n}>;\n\n\nexport type SignupMutation = (\n  { __typename?: 'Mutation' }\n  & { signup?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'email'>\n  )> }\n);\n\nexport type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentUserQuery = (\n  { __typename?: 'Query' }\n  & { currentUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name'>\n  )> }\n);\n\n\nexport const SigninDocument = gql`\n    mutation signin($email: String!, $password: String!) {\n  signin(input: {credentials: {email: $email, password: $password}}) {\n    token\n    user {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;\nexport type SigninComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SigninMutation, SigninMutationVariables>, 'mutation'>;\n\n    export const SigninComponent = (props: SigninComponentProps) => (\n      <ApolloReactComponents.Mutation<SigninMutation, SigninMutationVariables> mutation={SigninDocument} {...props} />\n    );\n    \nexport type SigninProps<TChildProps = {}, TDataName extends string = 'mutate'> = {\n      [key in TDataName]: ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>\n    } & TChildProps;\nexport function withSignin<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  SigninMutation,\n  SigninMutationVariables,\n  SigninProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withMutation<TProps, SigninMutation, SigninMutationVariables, SigninProps<TChildProps, TDataName>>(SigninDocument, {\n      alias: 'signin',\n      ...operationOptions\n    });\n};\n\n/**\n * __useSigninMutation__\n *\n * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSigninMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signinMutation, { data, loading, error }] = useSigninMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {\n        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);\n      }\nexport type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;\nexport type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;\nexport type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;\nexport const SignupDocument = gql`\n    mutation signup($email: String!, $password: String!, $name: String!) {\n  signup(input: {name: $name, authProvider: {credentials: {email: $email, password: $password}}}) {\n    id\n    name\n    email\n  }\n}\n    `;\nexport type SignupMutationFn = ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>;\nexport type SignupComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<SignupMutation, SignupMutationVariables>, 'mutation'>;\n\n    export const SignupComponent = (props: SignupComponentProps) => (\n      <ApolloReactComponents.Mutation<SignupMutation, SignupMutationVariables> mutation={SignupDocument} {...props} />\n    );\n    \nexport type SignupProps<TChildProps = {}, TDataName extends string = 'mutate'> = {\n      [key in TDataName]: ApolloReactCommon.MutationFunction<SignupMutation, SignupMutationVariables>\n    } & TChildProps;\nexport function withSignup<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  SignupMutation,\n  SignupMutationVariables,\n  SignupProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withMutation<TProps, SignupMutation, SignupMutationVariables, SignupProps<TChildProps, TDataName>>(SignupDocument, {\n      alias: 'signup',\n      ...operationOptions\n    });\n};\n\n/**\n * __useSignupMutation__\n *\n * To run a mutation, you first call `useSignupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signupMutation, { data, loading, error }] = useSignupMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useSignupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignupMutation, SignupMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignupMutation, SignupMutationVariables>(SignupDocument, baseOptions);\n      }\nexport type SignupMutationHookResult = ReturnType<typeof useSignupMutation>;\nexport type SignupMutationResult = ApolloReactCommon.MutationResult<SignupMutation>;\nexport type SignupMutationOptions = ApolloReactCommon.BaseMutationOptions<SignupMutation, SignupMutationVariables>;\nexport const CurrentUserDocument = gql`\n    query currentUser {\n  currentUser {\n    id\n    name\n  }\n}\n    `;\nexport type CurrentUserComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CurrentUserQuery, CurrentUserQueryVariables>, 'query'>;\n\n    export const CurrentUserComponent = (props: CurrentUserComponentProps) => (\n      <ApolloReactComponents.Query<CurrentUserQuery, CurrentUserQueryVariables> query={CurrentUserDocument} {...props} />\n    );\n    \nexport type CurrentUserProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<CurrentUserQuery, CurrentUserQueryVariables>\n    } & TChildProps;\nexport function withCurrentUser<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CurrentUserQuery,\n  CurrentUserQueryVariables,\n  CurrentUserProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, CurrentUserQuery, CurrentUserQueryVariables, CurrentUserProps<TChildProps, TDataName>>(CurrentUserDocument, {\n      alias: 'currentUser',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCurrentUserQuery__\n *\n * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrentUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, baseOptions);\n      }\nexport function useCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, baseOptions);\n        }\nexport type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;\nexport type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;\nexport type CurrentUserQueryResult = ApolloReactCommon.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;"]},"metadata":{},"sourceType":"module"}