{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/components/Upload.tsx\";\nimport { faUpload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\"; // import { useUploadActivityMutation } from '../generated/graphql'\n\nconst toGeoJson = require(\"@tmcw/togeojson\");\n\nconst DOMParser = require(\"xmldom\").DOMParser;\n\nconst halfmoon = require(\"halfmoon\");\n\nconst Upload = props => {\n  let fileReader; // const [uploadActivityMutation] = useUploadActivityMutation()\n\n  const handleFileRead = async () => {\n    const content = fileReader.result;\n    const gpx = new DOMParser().parseFromString(content);\n    const converted = toGeoJson.gpx(gpx);\n    const json = converted[\"features\"][0]; // try {\n    //   await uploadActivityMutation({\n    //     variables: {\n    //       title: json.properties.name,\n    //       description: '',\n    //       geoJson: JSON.stringify(converted),\n    //       userId: props.userId,\n    //     },\n    //     refetchQueries: ['allActivities', 'getUserById', 'latestActivity'],\n    //   })\n    // } catch (error) {\n    //   console.log(error)\n    // }\n  };\n\n  useEffect(() => {\n    halfmoon.onDOMContentLoaded();\n  }, []);\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary mr-10\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    className: \"mr-10\",\n    icon: faUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), \"Upload\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"file\",\n    className: \"input-file d-none\",\n    accept: \".gpx\",\n    onChange: e => e.target.files && handleFileChosen(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Upload;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/components/Upload.tsx"],"names":["faUpload","FontAwesomeIcon","React","useEffect","toGeoJson","require","DOMParser","halfmoon","Upload","props","fileReader","handleFileRead","content","result","gpx","parseFromString","converted","json","onDOMContentLoaded","handleFileChosen","file","FileReader","onloadend","readAsText","e","target","files"],"mappings":";AAAA,SAASA,QAAT,QAAyB,mCAAzB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,SAApC;;AACA,MAAMC,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AAMA,MAAMG,MAAM,GAAIC,KAAD,IAAkB;AAC/B,MAAIC,UAAJ,CAD+B,CAE/B;;AAEA,QAAMC,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAGF,UAAU,CAACG,MAA3B;AAEA,UAAMC,GAAG,GAAG,IAAIR,SAAJ,GAAgBS,eAAhB,CAAgCH,OAAhC,CAAZ;AACA,UAAMI,SAAS,GAAGZ,SAAS,CAACU,GAAV,CAAcA,GAAd,CAAlB;AACA,UAAMG,IAAI,GAAGD,SAAS,CAAC,UAAD,CAAT,CAAsB,CAAtB,CAAb,CALiC,CAOjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GApBD;;AAsBAb,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,QAAQ,CAACW,kBAAT;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,gBAAgB,GAAIC,IAAD,IAAe;AACtCV,IAAAA,UAAU,GAAG,IAAIW,UAAJ,EAAb;AACAX,IAAAA,UAAU,CAACY,SAAX,GAAuBX,cAAvB;AACAD,IAAAA,UAAU,CAACa,UAAX,CAAsBH,IAAtB;AACD,GAJD;;AAMA,sBACE;AAAQ,IAAA,SAAS,EAAC,uBAAlB;AAA0C,IAAA,IAAI,EAAC,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,OAA3B;AAAmC,IAAA,IAAI,EAAEpB,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,yBAGE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,MAFL;AAGE,IAAA,SAAS,EAAC,mBAHZ;AAIE,IAAA,MAAM,EAAC,MAJT;AAKE,IAAA,QAAQ,EAAGwB,CAAD,IACRA,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBP,gBAAgB,CAACK,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF;AAiBD,CArDD;;AAuDA,eAAelB,MAAf","sourcesContent":["import { faUpload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\n// import { useUploadActivityMutation } from '../generated/graphql'\n\nconst toGeoJson = require(\"@tmcw/togeojson\");\nconst DOMParser = require(\"xmldom\").DOMParser;\nconst halfmoon = require(\"halfmoon\");\n\ninterface Props {\n  userId: string;\n}\n\nconst Upload = (props: Props) => {\n  let fileReader: FileReader;\n  // const [uploadActivityMutation] = useUploadActivityMutation()\n\n  const handleFileRead = async () => {\n    const content = fileReader.result;\n\n    const gpx = new DOMParser().parseFromString(content);\n    const converted = toGeoJson.gpx(gpx);\n    const json = converted[\"features\"][0];\n\n    // try {\n    //   await uploadActivityMutation({\n    //     variables: {\n    //       title: json.properties.name,\n    //       description: '',\n    //       geoJson: JSON.stringify(converted),\n    //       userId: props.userId,\n    //     },\n    //     refetchQueries: ['allActivities', 'getUserById', 'latestActivity'],\n    //   })\n    // } catch (error) {\n    //   console.log(error)\n    // }\n  };\n\n  useEffect(() => {\n    halfmoon.onDOMContentLoaded();\n  }, []);\n\n  const handleFileChosen = (file: any) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return (\n    <button className=\"btn btn-primary mr-10\" type=\"button\">\n      <label>\n        <FontAwesomeIcon className=\"mr-10\" icon={faUpload} />\n        Upload\n        <input\n          type=\"file\"\n          id=\"file\"\n          className=\"input-file d-none\"\n          accept=\".gpx\"\n          onChange={(e) =>\n            e.target.files && handleFileChosen(e.target.files[0])\n          }\n        />\n      </label>\n    </button>\n  );\n};\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}