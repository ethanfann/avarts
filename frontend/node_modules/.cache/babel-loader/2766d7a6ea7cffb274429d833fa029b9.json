{"ast":null,"code":"var Line = require('./line');\n\nvar simplifyGeometry = function (points, tolerance) {\n  var dmax = 0;\n  var index = 0;\n\n  for (var i = 1; i <= points.length - 2; i++) {\n    var d = new Line(points[0], points[points.length - 1]).perpendicularDistance(points[i]);\n\n    if (d > dmax) {\n      index = i;\n      dmax = d;\n    }\n  }\n\n  if (dmax > tolerance) {\n    var results_one = simplifyGeometry(points.slice(0, index), tolerance);\n    var results_two = simplifyGeometry(points.slice(index, points.length), tolerance);\n    var results = results_one.concat(results_two);\n  } else if (points.length > 1) {\n    results = [points[0], points[points.length - 1]];\n  } else {\n    results = [points[0]];\n  }\n\n  return results;\n};\n\nmodule.exports = simplifyGeometry;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/simplify-geometry/lib/index.js"],"names":["Line","require","simplifyGeometry","points","tolerance","dmax","index","i","length","d","perpendicularDistance","results_one","slice","results_two","results","concat","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIC,gBAAgB,GAAG,UAASC,MAAT,EAAiBC,SAAjB,EAA2B;AAEhD,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,MAAM,CAACK,MAAP,GAAgB,CAArC,EAAwCD,CAAC,EAAzC,EAA4C;AAC1C,QAAIE,CAAC,GAAG,IAAIT,IAAJ,CAASG,MAAM,CAAC,CAAD,CAAf,EAAoBA,MAAM,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,CAA1B,EAA+CE,qBAA/C,CAAqEP,MAAM,CAACI,CAAD,CAA3E,CAAR;;AACA,QAAIE,CAAC,GAAGJ,IAAR,EAAa;AACXC,MAAAA,KAAK,GAAGC,CAAR;AACAF,MAAAA,IAAI,GAAGI,CAAP;AACD;AACF;;AAED,MAAIJ,IAAI,GAAGD,SAAX,EAAqB;AACnB,QAAIO,WAAW,GAAGT,gBAAgB,CAACC,MAAM,CAACS,KAAP,CAAa,CAAb,EAAgBN,KAAhB,CAAD,EAAyBF,SAAzB,CAAlC;AACA,QAAIS,WAAW,GAAGX,gBAAgB,CAACC,MAAM,CAACS,KAAP,CAAaN,KAAb,EAAoBH,MAAM,CAACK,MAA3B,CAAD,EAAqCJ,SAArC,CAAlC;AAEA,QAAIU,OAAO,GAAGH,WAAW,CAACI,MAAZ,CAAmBF,WAAnB,CAAd;AAED,GAND,MAQK,IAAIV,MAAM,CAACK,MAAP,GAAgB,CAApB,EAAuB;AAE1BM,IAAAA,OAAO,GAAG,CAACX,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAACA,MAAM,CAACK,MAAP,GAAgB,CAAjB,CAAlB,CAAV;AAED,GAJI,MAMA;AAEHM,IAAAA,OAAO,GAAG,CAACX,MAAM,CAAC,CAAD,CAAP,CAAV;AAED;;AAED,SAAOW,OAAP;AAGD,CApCD;;AAsCAE,MAAM,CAACC,OAAP,GAAiBf,gBAAjB","sourcesContent":["var Line = require('./line');\n\nvar simplifyGeometry = function(points, tolerance){\n\n  var dmax = 0;\n  var index = 0;\n\n  for (var i = 1; i <= points.length - 2; i++){\n    var d = new Line(points[0], points[points.length - 1]).perpendicularDistance(points[i]);\n    if (d > dmax){\n      index = i;\n      dmax = d;\n    }\n  }\n\n  if (dmax > tolerance){\n    var results_one = simplifyGeometry(points.slice(0, index), tolerance);\n    var results_two = simplifyGeometry(points.slice(index, points.length), tolerance);\n\n    var results = results_one.concat(results_two);\n\n  }\n\n  else if (points.length > 1) {\n\n    results = [points[0], points[points.length - 1]];\n\n  }\n\n  else {\n\n    results = [points[0]];\n\n  }\n\n  return results;\n\n\n}\n\nmodule.exports = simplifyGeometry;\n"]},"metadata":{},"sourceType":"script"}