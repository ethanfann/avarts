{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/components/Upload.tsx\";\nimport React, { useEffect } from 'react';\nimport { useUploadActivityMutation } from '../generated/graphql';\n\nconst toGeoJson = require('@tmcw/togeojson');\n\nconst DOMParser = require('xmldom').DOMParser;\n\nconst halfmoon = require('halfmoon');\n\nconst Upload = props => {\n  let fileReader;\n  const [uploadActivityMutation] = useUploadActivityMutation();\n\n  const handleFileRead = async () => {\n    const content = fileReader.result;\n    const gpx = new DOMParser().parseFromString(content);\n    const converted = toGeoJson.gpx(gpx);\n    const json = converted['features'][0];\n\n    try {\n      await uploadActivityMutation({\n        variables: {\n          title: json.properties.name,\n          description: '',\n          geoJson: JSON.stringify(converted),\n          userId: props.userId\n        },\n        refetchQueries: ['activitiesByUserId', 'me']\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    halfmoon.onDOMContentLoaded();\n  }, []);\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return (\n    /*#__PURE__*/\n    // <button className=\"btn btn-primary mr-10\" type=\"button\">\n    //   <label>\n    //     <FontAwesomeIcon className=\"mr-10\" icon={faUpload} />\n    //     Upload\n    //     <input\n    //       type=\"file\"\n    //       id=\"file\"\n    //       className=\"input-file d-none\"\n    //       accept=\".gpx\"\n    //       onChange={(e) =>\n    //         e.target.files && handleFileChosen(e.target.files[0])\n    //       }\n    //     />\n    //   </label>\n    // </button>\n    React.createElement(\"a\", {\n      href: \"#modal-1\",\n      className: \"btn btn-primary\",\n      role: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }, \"Test\")\n  );\n};\n\nexport default Upload;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/components/Upload.tsx"],"names":["React","useEffect","useUploadActivityMutation","toGeoJson","require","DOMParser","halfmoon","Upload","props","fileReader","uploadActivityMutation","handleFileRead","content","result","gpx","parseFromString","converted","json","variables","title","properties","name","description","geoJson","JSON","stringify","userId","refetchQueries","error","console","log","onDOMContentLoaded","handleFileChosen","file","FileReader","onloadend","readAsText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,yBAAT,QAA0C,sBAA1C;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,SAApC;;AACA,MAAMC,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AAMA,MAAMG,MAAM,GAAIC,KAAD,IAAkB;AAC/B,MAAIC,UAAJ;AACA,QAAM,CAACC,sBAAD,IAA2BR,yBAAyB,EAA1D;;AAEA,QAAMS,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAGH,UAAU,CAACI,MAA3B;AAEA,UAAMC,GAAG,GAAG,IAAIT,SAAJ,GAAgBU,eAAhB,CAAgCH,OAAhC,CAAZ;AACA,UAAMI,SAAS,GAAGb,SAAS,CAACW,GAAV,CAAcA,GAAd,CAAlB;AACA,UAAMG,IAAI,GAAGD,SAAS,CAAC,UAAD,CAAT,CAAsB,CAAtB,CAAb;;AAEA,QAAI;AACF,YAAMN,sBAAsB,CAAC;AAC3BQ,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAEF,IAAI,CAACG,UAAL,CAAgBC,IADd;AAETC,UAAAA,WAAW,EAAE,EAFJ;AAGTC,UAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAeT,SAAf,CAHA;AAITU,UAAAA,MAAM,EAAElB,KAAK,CAACkB;AAJL,SADgB;AAO3BC,QAAAA,cAAc,EAAE,CAAC,oBAAD,EAAuB,IAAvB;AAPW,OAAD,CAA5B;AASD,KAVD,CAUE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GApBD;;AAsBA3B,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,QAAQ,CAACyB,kBAAT;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,gBAAgB,GAAIC,IAAD,IAAe;AACtCxB,IAAAA,UAAU,GAAG,IAAIyB,UAAJ,EAAb;AACAzB,IAAAA,UAAU,CAAC0B,SAAX,GAAuBxB,cAAvB;AACAF,IAAAA,UAAU,CAAC2B,UAAX,CAAsBH,IAAtB;AACD,GAJD;;AAMA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAG,MAAA,IAAI,EAAC,UAAR;AAAmB,MAAA,SAAS,EAAC,iBAA7B;AAA+C,MAAA,IAAI,EAAC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBF;AAoBD,CAxDD;;AA0DA,eAAe1B,MAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useUploadActivityMutation } from '../generated/graphql'\n\nconst toGeoJson = require('@tmcw/togeojson')\nconst DOMParser = require('xmldom').DOMParser\nconst halfmoon = require('halfmoon')\n\ninterface Props {\n  userId: string\n}\n\nconst Upload = (props: Props) => {\n  let fileReader: FileReader\n  const [uploadActivityMutation] = useUploadActivityMutation()\n\n  const handleFileRead = async () => {\n    const content = fileReader.result\n\n    const gpx = new DOMParser().parseFromString(content)\n    const converted = toGeoJson.gpx(gpx)\n    const json = converted['features'][0]\n\n    try {\n      await uploadActivityMutation({\n        variables: {\n          title: json.properties.name,\n          description: '',\n          geoJson: JSON.stringify(converted),\n          userId: props.userId,\n        },\n        refetchQueries: ['activitiesByUserId', 'me'],\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    halfmoon.onDOMContentLoaded()\n  }, [])\n\n  const handleFileChosen = (file: any) => {\n    fileReader = new FileReader()\n    fileReader.onloadend = handleFileRead\n    fileReader.readAsText(file)\n  }\n\n  return (\n    // <button className=\"btn btn-primary mr-10\" type=\"button\">\n    //   <label>\n    //     <FontAwesomeIcon className=\"mr-10\" icon={faUpload} />\n    //     Upload\n    //     <input\n    //       type=\"file\"\n    //       id=\"file\"\n    //       className=\"input-file d-none\"\n    //       accept=\".gpx\"\n    //       onChange={(e) =>\n    //         e.target.files && handleFileChosen(e.target.files[0])\n    //       }\n    //     />\n    //   </label>\n    // </button>\n    <a href=\"#modal-1\" className=\"btn btn-primary\" role=\"button\">\n      Test\n    </a>\n  )\n}\n\nexport default Upload\n"]},"metadata":{},"sourceType":"module"}