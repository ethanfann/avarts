{"ast":null,"code":"\"use strict\"; // Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports; // All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\n\n\niconv.encodings = null; // Characters emitted in case of error.\n\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?'; // Public API.\n\niconv.encode = function encode(str, encoding, options) {\n  str = \"\" + (str || \"\"); // Ensure string.\n\n  var encoder = iconv.getEncoder(encoding, options);\n  var res = encoder.write(str);\n  var trail = encoder.end();\n  return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res;\n};\n\niconv.decode = function decode(buf, encoding, options) {\n  if (typeof buf === 'string') {\n    if (!iconv.skipDecodeWarning) {\n      console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n      iconv.skipDecodeWarning = true;\n    }\n\n    buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n  }\n\n  var decoder = iconv.getDecoder(encoding, options);\n  var res = decoder.write(buf);\n  var trail = decoder.end();\n  return trail ? res + trail : res;\n};\n\niconv.encodingExists = function encodingExists(enc) {\n  try {\n    iconv.getCodec(enc);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}; // Legacy aliases to convert functions\n\n\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode; // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\n\niconv._codecDataCache = {};\n\niconv.getCodec = function getCodec(encoding) {\n  if (!iconv.encodings) iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n  // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n\n  var enc = iconv._canonicalizeEncoding(encoding); // Traverse iconv.encodings to find actual codec.\n\n\n  var codecOptions = {};\n\n  while (true) {\n    var codec = iconv._codecDataCache[enc];\n    if (codec) return codec;\n    var codecDef = iconv.encodings[enc];\n\n    switch (typeof codecDef) {\n      case \"string\":\n        // Direct alias to other encoding.\n        enc = codecDef;\n        break;\n\n      case \"object\":\n        // Alias with options. Can be layered.\n        for (var key in codecDef) codecOptions[key] = codecDef[key];\n\n        if (!codecOptions.encodingName) codecOptions.encodingName = enc;\n        enc = codecDef.type;\n        break;\n\n      case \"function\":\n        // Codec itself.\n        if (!codecOptions.encodingName) codecOptions.encodingName = enc; // The codec function must load all tables and return object with .encoder and .decoder methods.\n        // It'll be called only once (for each different options object).\n\n        codec = new codecDef(codecOptions, iconv);\n        iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n\n        return codec;\n\n      default:\n        throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\" + enc + \"')\");\n    }\n  }\n};\n\niconv._canonicalizeEncoding = function (encoding) {\n  // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n  return ('' + encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n};\n\niconv.getEncoder = function getEncoder(encoding, options) {\n  var codec = iconv.getCodec(encoding),\n      encoder = new codec.encoder(options, codec);\n  if (codec.bomAware && options && options.addBOM) encoder = new bomHandling.PrependBOM(encoder, options);\n  return encoder;\n};\n\niconv.getDecoder = function getDecoder(encoding, options) {\n  var codec = iconv.getCodec(encoding),\n      decoder = new codec.decoder(options, codec);\n  if (codec.bomAware && !(options && options.stripBOM === false)) decoder = new bomHandling.StripBOM(decoder, options);\n  return decoder;\n}; // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\n\n\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\n\nif (nodeVer) {\n  // Load streaming support in Node v0.10+\n  var nodeVerArr = nodeVer.split(\".\").map(Number);\n\n  if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n    require(\"./streams\")(iconv);\n  } // Load Node primitive extensions.\n\n\n  require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n  console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/iconv-lite/lib/index.js"],"names":["Buffer","require","bomHandling","iconv","module","exports","encodings","defaultCharUnicode","defaultCharSingleByte","encode","str","encoding","options","encoder","getEncoder","res","write","trail","end","length","concat","decode","buf","skipDecodeWarning","console","error","from","decoder","getDecoder","encodingExists","enc","getCodec","e","toEncoding","fromEncoding","_codecDataCache","_canonicalizeEncoding","codecOptions","codec","codecDef","key","encodingName","type","Error","toLowerCase","replace","bomAware","addBOM","PrependBOM","stripBOM","StripBOM","nodeVer","process","versions","node","nodeVerArr","split","map","Number"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n"]},"metadata":{},"sourceType":"script"}