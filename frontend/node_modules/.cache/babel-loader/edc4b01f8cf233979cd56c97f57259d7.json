{"ast":null,"code":"import inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { Source } from \"./source.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj), \".\"));\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        var _this$_options2;\n\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3; // Legacy support for the SDL?\n\n\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging\n */\n\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/graphql/language/parser.mjs"],"names":["inspect","devAssert","syntaxError","Kind","Location","Source","TokenKind","DirectiveLocation","Lexer","isPunctuatorTokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseType","type","parseTypeReference","sourceObj","concat","_lexer","_options","_proto","prototype","parseName","token","NAME","kind","loc","start","DOCUMENT","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","BRACE_L","peekDescription","unexpected","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","_this$_options","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advance","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","_this","LIST","values","any","BRACKET_R","_this2","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","description","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","_this$_options2","allowLegacySDLImplementsInterfaces","_this$_options3","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","startToken","_this$_options4","noLocation","lastToken","getTokenKindDesc","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes","call"],"mappings":"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","sourcesContent":["import inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { Source } from \"./source.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj), \".\"));\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var _this$_options;\n\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description: description,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        var _this$_options2;\n\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    var _this$_options3;\n\n    // Legacy support for the SDL?\n    if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    var _this$_options4;\n\n    if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging\n */\n\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}\n"]},"metadata":{},"sourceType":"module"}