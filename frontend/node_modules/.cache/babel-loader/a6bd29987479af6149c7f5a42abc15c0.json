{"ast":null,"code":"/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n/**\n * @internal\n */\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/graphql/language/blockString.mjs"],"names":["dedentBlockStringValue","rawString","lines","split","commonIndent","getBlockStringIndentation","i","length","slice","isBlank","shift","pop","join","line","indent","leadingWhitespace","str","printBlockString","value","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","hasTrailingSlash","printAsMultipleLines","result","replace"],"mappings":"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","sourcesContent":["/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n/**\n * @internal\n */\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var hasTrailingSlash = value[value.length - 1] === '\\\\';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n"]},"metadata":{},"sourceType":"module"}