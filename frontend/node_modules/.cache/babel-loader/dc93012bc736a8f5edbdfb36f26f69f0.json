{"ast":null,"code":"module.exports = function (geometry) {\n  if (geometry.type === 'LineString') return calculateLength(geometry.coordinates);else if (geometry.type === 'MultiLineString') return geometry.coordinates.reduce(function (memo, coordinates) {\n    return memo + calculateLength(coordinates);\n  }, 0);else return null;\n};\n\nfunction calculateLength(lineString) {\n  if (lineString.length < 2) return 0;\n  var result = 0;\n\n  for (var i = 1; i < lineString.length; i++) result += distance(lineString[i - 1][0], lineString[i - 1][1], lineString[i][0], lineString[i][1]);\n\n  return result;\n}\n/**\n * Calculate the approximate distance between two coordinates (lat/lon)\n *\n * © Chris Veness, MIT-licensed,\n * http://www.movable-type.co.uk/scripts/latlong.html#equirectangular\n */\n\n\nfunction distance(λ1, φ1, λ2, φ2) {\n  var R = 6371000;\n  Δλ = (λ2 - λ1) * Math.PI / 180;\n  φ1 = φ1 * Math.PI / 180;\n  φ2 = φ2 * Math.PI / 180;\n  var x = Δλ * Math.cos((φ1 + φ2) / 2);\n  var y = φ2 - φ1;\n  var d = Math.sqrt(x * x + y * y);\n  return R * d;\n}\n\n;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/geojson-length/index.js"],"names":["module","exports","geometry","type","calculateLength","coordinates","reduce","memo","lineString","length","result","i","distance","λ1","φ1","λ2","φ2","R","Δλ","Math","PI","x","cos","y","d","sqrt"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmB;AAChC,MAAIA,QAAQ,CAACC,IAAT,KAAkB,YAAtB,EACI,OAAOC,eAAe,CAACF,QAAQ,CAACG,WAAV,CAAtB,CADJ,KAEK,IAAIH,QAAQ,CAACC,IAAT,KAAkB,iBAAtB,EACD,OAAOD,QAAQ,CAACG,WAAT,CAAqBC,MAArB,CAA4B,UAASC,IAAT,EAAeF,WAAf,EAA4B;AAC3D,WAAOE,IAAI,GAAGH,eAAe,CAACC,WAAD,CAA7B;AACH,GAFM,EAEJ,CAFI,CAAP,CADC,KAKD,OAAO,IAAP;AACP,CATD;;AAWA,SAASD,eAAT,CAAyBI,UAAzB,EAAqC;AACjC,MAAIA,UAAU,CAACC,MAAX,GAAkB,CAAtB,EACI,OAAO,CAAP;AACJ,MAAIC,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,UAAU,CAACC,MAA3B,EAAmCE,CAAC,EAApC,EACID,MAAM,IAAIE,QAAQ,CAACJ,UAAU,CAACG,CAAC,GAAC,CAAH,CAAV,CAAgB,CAAhB,CAAD,EAAoBH,UAAU,CAACG,CAAC,GAAC,CAAH,CAAV,CAAgB,CAAhB,CAApB,EACCH,UAAU,CAACG,CAAD,CAAV,CAAgB,CAAhB,CADD,EACoBH,UAAU,CAACG,CAAD,CAAV,CAAgB,CAAhB,CADpB,CAAlB;;AAEJ,SAAOD,MAAP;AACH;AAED;;;;;;;;AAMA,SAASE,QAAT,CAAkBC,EAAlB,EAAqBC,EAArB,EAAwBC,EAAxB,EAA2BC,EAA3B,EAA+B;AAC3B,MAAIC,CAAC,GAAG,OAAR;AACAC,EAAAA,EAAE,GAAG,CAACH,EAAE,GAAGF,EAAN,IAAYM,IAAI,CAACC,EAAjB,GAAsB,GAA3B;AACAN,EAAAA,EAAE,GAAGA,EAAE,GAAGK,IAAI,CAACC,EAAV,GAAe,GAApB;AACAJ,EAAAA,EAAE,GAAGA,EAAE,GAAGG,IAAI,CAACC,EAAV,GAAe,GAApB;AACA,MAAIC,CAAC,GAAGH,EAAE,GAAGC,IAAI,CAACG,GAAL,CAAS,CAACR,EAAE,GAACE,EAAJ,IAAQ,CAAjB,CAAb;AACA,MAAIO,CAAC,GAAIP,EAAE,GAACF,EAAZ;AACA,MAAIU,CAAC,GAAGL,IAAI,CAACM,IAAL,CAAUJ,CAAC,GAACA,CAAF,GAAME,CAAC,GAACA,CAAlB,CAAR;AACA,SAAON,CAAC,GAAGO,CAAX;AACH;;AAAA","sourcesContent":["module.exports = function(geometry) {\n    if (geometry.type === 'LineString')\n        return calculateLength(geometry.coordinates);\n    else if (geometry.type === 'MultiLineString')\n        return geometry.coordinates.reduce(function(memo, coordinates) {\n            return memo + calculateLength(coordinates);\n        }, 0);\n    else\n        return null;\n}\n\nfunction calculateLength(lineString) {\n    if (lineString.length<2)\n        return 0;\n    var result = 0;\n    for (var i=1; i<lineString.length; i++)\n        result += distance(lineString[i-1][0],lineString[i-1][1],\n                           lineString[i  ][0],lineString[i  ][1]);\n    return result;\n}\n\n/**\n * Calculate the approximate distance between two coordinates (lat/lon)\n *\n * © Chris Veness, MIT-licensed,\n * http://www.movable-type.co.uk/scripts/latlong.html#equirectangular\n */\nfunction distance(λ1,φ1,λ2,φ2) {\n    var R = 6371000;\n    Δλ = (λ2 - λ1) * Math.PI / 180;\n    φ1 = φ1 * Math.PI / 180;\n    φ2 = φ2 * Math.PI / 180;\n    var x = Δλ * Math.cos((φ1+φ2)/2);\n    var y = (φ2-φ1);\n    var d = Math.sqrt(x*x + y*y);\n    return R * d;\n};\n"]},"metadata":{},"sourceType":"script"}