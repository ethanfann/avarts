{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/components/Upload.tsx\";\nimport React, { useEffect } from 'react';\nimport { useUploadActivityMutation } from '../generated/graphql';\n\nconst toGeoJson = require('@tmcw/togeojson');\n\nconst DOMParser = require('xmldom').DOMParser;\n\nconst halfmoon = require('halfmoon');\n\nconst Upload = props => {\n  let fileReader;\n  const [uploadActivityMutation] = useUploadActivityMutation();\n\n  const handleFileRead = async () => {\n    const content = fileReader.result;\n    const gpx = new DOMParser().parseFromString(content);\n    const converted = toGeoJson.gpx(gpx);\n    const json = converted['features'][0];\n\n    try {\n      await uploadActivityMutation({\n        variables: {\n          title: json.properties.name,\n          description: '',\n          geoJson: JSON.stringify(converted),\n          userId: props.userId\n        },\n        refetchQueries: ['activitiesByUserId', 'me']\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    halfmoon.onDOMContentLoaded();\n  }, []);\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    id: \"modal-1\",\n    role: \"dialog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-dialog\",\n    role: \"document\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"close\",\n    role: \"button\",\n    \"aria-label\": \"Close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"modal-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Modal title\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \"This is the modal content. Almost any type of content can be presented to the user here.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-right mt-20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"btn mr-5\",\n    role: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Close\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"btn btn-primary\",\n    role: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, \"I understand\")))))), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"modal-1\",\n    className: \"btn btn-primary\",\n    role: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"Open modal\"), ' ');\n};\n\nexport default Upload;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/components/Upload.tsx"],"names":["React","useEffect","useUploadActivityMutation","toGeoJson","require","DOMParser","halfmoon","Upload","props","fileReader","uploadActivityMutation","handleFileRead","content","result","gpx","parseFromString","converted","json","variables","title","properties","name","description","geoJson","JSON","stringify","userId","refetchQueries","error","console","log","onDOMContentLoaded","handleFileChosen","file","FileReader","onloadend","readAsText"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useUploadActivityMutation } from '../generated/graphql'\n\nconst toGeoJson = require('@tmcw/togeojson')\nconst DOMParser = require('xmldom').DOMParser\nconst halfmoon = require('halfmoon')\n\ninterface Props {\n  userId: string\n}\n\nconst Upload = (props: Props) => {\n  let fileReader: FileReader\n  const [uploadActivityMutation] = useUploadActivityMutation()\n\n  const handleFileRead = async () => {\n    const content = fileReader.result\n\n    const gpx = new DOMParser().parseFromString(content)\n    const converted = toGeoJson.gpx(gpx)\n    const json = converted['features'][0]\n\n    try {\n      await uploadActivityMutation({\n        variables: {\n          title: json.properties.name,\n          description: '',\n          geoJson: JSON.stringify(converted),\n          userId: props.userId,\n        },\n        refetchQueries: ['activitiesByUserId', 'me'],\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    halfmoon.onDOMContentLoaded()\n  }, [])\n\n  const handleFileChosen = (file: any) => {\n    fileReader = new FileReader()\n    fileReader.onloadend = handleFileRead\n    fileReader.readAsText(file)\n  }\n\n  return (\n    <>\n      <div>\n        <div className=\"modal\" id=\"modal-1\" role=\"dialog\">\n          <div className=\"modal-dialog\" role=\"document\">\n            <div className=\"modal-content\">\n              <a className=\"close\" role=\"button\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </a>\n              <h5 className=\"modal-title\">Modal title</h5>\n              <p>\n                This is the modal content. Almost any type of content can be\n                presented to the user here.\n              </p>\n              <div className=\"text-right mt-20\">\n                <a className=\"btn mr-5\" role=\"button\">\n                  Close\n                </a>\n                <a className=\"btn btn-primary\" role=\"button\">\n                  I understand\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* <button className=\"btn btn-primary mr-10\" type=\"button\">\n        <label>\n          <FontAwesomeIcon className=\"mr-10\" icon={faUpload} />\n          Upload\n          <input\n            type=\"file\"\n            id=\"file\"\n            className=\"input-file d-none\"\n            accept=\".gpx\"\n            onChange={(e) =>\n              e.target.files && handleFileChosen(e.target.files[0])\n            }\n          />\n        </label>\n      </button> */}\n      <a href=\"modal-1\" className=\"btn btn-primary\" role=\"button\">\n        Open modal\n      </a>{' '}\n    </>\n  )\n}\n\nexport default Upload\n"]},"metadata":{},"sourceType":"module"}