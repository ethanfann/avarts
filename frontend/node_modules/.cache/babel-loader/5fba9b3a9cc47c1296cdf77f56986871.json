{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/components/TimeLine/MetricRow.tsx\";\nimport DayJs from 'dayjs';\nimport React from 'react';\nimport styled from 'styled-components';\nimport Metric from './Metric';\n\nconst {\n  getElevationGain\n} = require('geojson-elevation-gain/build/geojson-elevation');\n\nconst geojsonLength = require('geojson-length');\n\nconst MetricRow = props => {\n  const {\n    geoJson\n  } = props;\n\n  const rideLength = geoJsonStr => {\n    const json = JSON.parse(geoJsonStr);\n    var area = geojsonLength(json['features'][0].geometry);\n    return area;\n  };\n\n  const elevGain = geoJsonStr => {\n    const json = JSON.parse(geoJsonStr);\n    return Math.round(getElevationGain(json['features'][0].geometry, 40) * 3.28084);\n  };\n\n  const elapsedTime = geoJsonStr => {\n    const json = JSON.parse(geoJsonStr);\n    const coordTimes = json['features'][0].properties.coordTimes;\n    const firstCoordTime = DayJs(coordTimes[0]);\n    const lastCoordTime = DayJs(coordTimes[coordTimes.length - 1]);\n    const seconds = lastCoordTime.diff(firstCoordTime, 'second');\n    const time = new Date(seconds * 1000).toISOString().substr(11, 8);\n    const split = time.split(':');\n    return /*#__PURE__*/React.createElement(React.Fragment, null, parseInt(split[0]), /*#__PURE__*/React.createElement(\"abbr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"h\"), \" \", parseInt(split[1]), /*#__PURE__*/React.createElement(\"abbr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"m\"));\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex w-full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Metric, {\n    header: \"Distance\",\n    value: /*#__PURE__*/React.createElement(React.Fragment, null, (rideLength(geoJson) * 0.000621371).toFixed(2), /*#__PURE__*/React.createElement(\"abbr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, \"mi\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Metric, {\n    header: \"Elev Gain\",\n    value: /*#__PURE__*/React.createElement(React.Fragment, null, elevGain(geoJson).toString(), /*#__PURE__*/React.createElement(\"abbr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, \"ft\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Metric, {\n    header: \"Time\",\n    value: elapsedTime(geoJson),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst Divider = styled.div`\n  margin: auto;\n  width: 1px;\n  background: grey;\n  height: 24px;\n  opacity: 30%;\n  align-self: center;\n`;\nexport default MetricRow;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/components/TimeLine/MetricRow.tsx"],"names":["DayJs","React","styled","Metric","getElevationGain","require","geojsonLength","MetricRow","props","geoJson","rideLength","geoJsonStr","json","JSON","parse","area","geometry","elevGain","Math","round","elapsedTime","coordTimes","properties","firstCoordTime","lastCoordTime","length","seconds","diff","time","Date","toISOString","substr","split","parseInt","toFixed","toString","Divider","div"],"mappings":"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","sourcesContent":["import DayJs from 'dayjs'\nimport React from 'react'\nimport styled from 'styled-components'\nimport Metric from './Metric'\n\nconst {\n  getElevationGain,\n} = require('geojson-elevation-gain/build/geojson-elevation')\n\nconst geojsonLength = require('geojson-length')\n\ntype Props = {\n  geoJson: string\n}\n\nconst MetricRow = (props: Props) => {\n  const { geoJson } = props\n\n  const rideLength = (geoJsonStr: string) => {\n    const json = JSON.parse(geoJsonStr)\n    var area = geojsonLength(json['features'][0].geometry)\n    return area\n  }\n\n  const elevGain = (geoJsonStr: string) => {\n    const json = JSON.parse(geoJsonStr)\n    return Math.round(\n      getElevationGain(json['features'][0].geometry, 40) * 3.28084\n    )\n  }\n\n  const elapsedTime = (geoJsonStr: string) => {\n    const json = JSON.parse(geoJsonStr)\n    const coordTimes = json['features'][0].properties.coordTimes\n    const firstCoordTime = DayJs(coordTimes[0])\n    const lastCoordTime = DayJs(coordTimes[coordTimes.length - 1])\n    const seconds = lastCoordTime.diff(firstCoordTime, 'second')\n    const time = new Date(seconds * 1000).toISOString().substr(11, 8)\n    const split = time.split(':')\n    return (\n      <>\n        {parseInt(split[0])}\n        <abbr>h</abbr> {parseInt(split[1])}\n        <abbr>m</abbr>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"d-flex w-full\">\n        <div>\n          <Metric\n            header=\"Distance\"\n            value={\n              <>\n                {(rideLength(geoJson) * 0.000621371).toFixed(2)}\n                <abbr>mi</abbr>\n              </>\n            }\n          />\n        </div>\n        <Divider />\n        <div className=\"\">\n          <Metric\n            header=\"Elev Gain\"\n            value={\n              <>\n                {elevGain(geoJson).toString()}\n                <abbr>ft</abbr>\n              </>\n            }\n          />\n        </div>\n        <Divider />\n        <div className=\"\">\n          <Metric header=\"Time\" value={elapsedTime(geoJson)} />\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst Divider = styled.div`\n  margin: auto;\n  width: 1px;\n  background: grey;\n  height: 24px;\n  opacity: 30%;\n  align-self: center;\n`\n\nexport default MetricRow\n"]},"metadata":{},"sourceType":"module"}