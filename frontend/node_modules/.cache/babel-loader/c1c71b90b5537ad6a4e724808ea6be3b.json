{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { MutationStore } from \"./MutationStore.js\";\nimport { ObservableQuery } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d,\n        _e = _a.clientAwareness,\n        clientAwareness = _e === void 0 ? {} : _e,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.mutationStore = new MutationStore();\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(13) : new InvariantError('QueryManager stopped while query was in flight'));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        fetchPolicy = _a.fetchPolicy,\n        _e = _a.context,\n        context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n\n      var _this = this;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 14) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 15) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n\n          case 2:\n            generateUpdateQueriesInfo = function () {\n              var ret = {};\n\n              if (updateQueriesByName) {\n                _this.queries.forEach(function (_a, queryId) {\n                  var observableQuery = _a.observableQuery;\n\n                  if (observableQuery) {\n                    var queryName = observableQuery.queryName;\n\n                    if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                      ret[queryId] = {\n                        updater: updateQueriesByName[queryName],\n                        queryInfo: _this.queries.get(queryId)\n                      };\n                    }\n                  }\n                });\n              }\n\n              return ret;\n            };\n\n            this.mutationStore.initMutation(mutationId, mutation, variables);\n\n            if (optimisticResponse) {\n              optimistic_1 = typeof optimisticResponse === 'function' ? optimisticResponse(variables) : optimisticResponse;\n              this.cache.recordOptimisticTransaction(function (cache) {\n                try {\n                  markMutationResult({\n                    mutationId: mutationId,\n                    result: {\n                      data: optimistic_1\n                    },\n                    document: mutation,\n                    variables: variables,\n                    queryUpdatersById: generateUpdateQueriesInfo(),\n                    update: updateWithProxyFn\n                  }, cache);\n                } catch (error) {\n                  process.env.NODE_ENV === \"production\" || invariant.error(error);\n                }\n              }, mutationId);\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function (result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n\n                  self.mutationStore.markMutationResult(mutationId);\n\n                  if (fetchPolicy !== 'no-cache') {\n                    try {\n                      markMutationResult({\n                        mutationId: mutationId,\n                        result: result,\n                        document: mutation,\n                        variables: variables,\n                        queryUpdatersById: generateUpdateQueriesInfo(),\n                        update: updateWithProxyFn\n                      }, self.cache);\n                    } catch (e) {\n                      error = new ApolloError({\n                        networkError: e\n                      });\n                      return;\n                    }\n                  }\n\n                  storeResult = result;\n                },\n                error: function (err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function () {\n                  if (error) {\n                    self.mutationStore.markMutationError(mutationId, error);\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n\n                  var refetchQueryPromises = [];\n\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n\n                          if (observableQuery && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n\n                    resolve(storeResult);\n                  }, reject);\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this.cache);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 16) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 17) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 18) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 19) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    var queryId = this.generateQueryId();\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(20) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    this.mutationStore.reset();\n    return this.cache.reset();\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n\n      if (observableQuery) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        _this.getQuery(queryId).setDiff(null);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        variables = _a.variables,\n        _b = _a.context,\n        context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables, false).map(function (result) {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          if (!graphQLResultHasError(result)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _b = this,\n          inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n          link = _b.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n    var lastRequestId = queryInfo.lastRequestId;\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n\n      if (lastRequestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        queryInfo.markResult(result, options, allowCacheWrite);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: queryInfo.networkStatus || NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (lastRequestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var oldNetworkStatus = queryInfo.networkStatus;\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var mightUseNetwork = fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\";\n\n    if (mightUseNetwork && notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus)) {\n      if (fetchPolicy !== \"cache-first\") {\n        fetchPolicy = \"cache-and-network\";\n      }\n\n      returnPartialData = true;\n    }\n\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      Promise.resolve().then(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.cleanup(function () {\n      _this.fetchCancelFns.delete(queryId);\n\n      if (options.nextFetchPolicy) {\n        options.fetchPolicy = options.nextFetchPolicy;\n        options.nextFetchPolicy = void 0;\n      }\n    });\n    return concast;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n    var _this = this;\n\n    var query = options.query,\n        variables = options.variables,\n        fetchPolicy = options.fetchPolicy,\n        errorPolicy = options.errorPolicy,\n        returnPartialData = options.returnPartialData,\n        context = options.context;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      lastRequestId: this.generateRequestId(),\n      networkStatus: networkStatus\n    });\n\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (process.env.NODE_ENV !== 'production' && isNonEmptyArray(diff.missing) && !equal(data, {})) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) {\n          return m.path.join('.');\n        }).join(', '), diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (_this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var resultsFromLink = function (allowCacheWrite) {\n      return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n\n          return [resultsFromLink(true)];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n\n          return [resultsFromLink(true)];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        return [resultsFromLink(true)];\n\n      case \"no-cache\":\n        return [resultsFromLink(false)];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this.cache));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };\n\nfunction markMutationResult(mutation, cache) {\n  if (!graphQLResultHasError(mutation.result)) {\n    var cacheWrites_1 = [{\n      result: mutation.result.data,\n      dataId: 'ROOT_MUTATION',\n      query: mutation.document,\n      variables: mutation.variables\n    }];\n    var queryUpdatersById_1 = mutation.queryUpdatersById;\n\n    if (queryUpdatersById_1) {\n      Object.keys(queryUpdatersById_1).forEach(function (id) {\n        var _a = queryUpdatersById_1[id],\n            updater = _a.updater,\n            _b = _a.queryInfo,\n            document = _b.document,\n            variables = _b.variables;\n\n        var _c = cache.diff({\n          query: document,\n          variables: variables,\n          returnPartialData: true,\n          optimistic: false\n        }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n\n        if (complete && currentQueryResult) {\n          var nextQueryResult = updater(currentQueryResult, {\n            mutationResult: mutation.result,\n            queryName: getOperationName(document) || undefined,\n            queryVariables: variables\n          });\n\n          if (nextQueryResult) {\n            cacheWrites_1.push({\n              result: nextQueryResult,\n              dataId: 'ROOT_QUERY',\n              query: document,\n              variables: variables\n            });\n          }\n        }\n      });\n    }\n\n    cache.performTransaction(function (c) {\n      cacheWrites_1.forEach(function (write) {\n        return c.write(write);\n      });\n      var update = mutation.update;\n\n      if (update) {\n        update(c, mutation.result);\n      }\n    }, null);\n  }\n}","map":{"version":3,"sources":["../../src/core/QueryManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { MutationStore } from \"./MutationStore.js\";\nimport { ObservableQuery } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(13) : new InvariantError('QueryManager stopped while query was in flight'));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation, 14) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 15) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n                        mutationId = this.generateMutationId();\n                        mutation = this.transform(mutation).document;\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                queryInfo: _this.queries.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        if (optimisticResponse) {\n                            optimistic_1 = typeof optimisticResponse === 'function'\n                                ? optimisticResponse(variables)\n                                : optimisticResponse;\n                            this.cache.recordOptimisticTransaction(function (cache) {\n                                try {\n                                    markMutationResult({\n                                        mutationId: mutationId,\n                                        result: { data: optimistic_1 },\n                                        document: mutation,\n                                        variables: variables,\n                                        queryUpdatersById: generateUpdateQueriesInfo(),\n                                        update: updateWithProxyFn,\n                                    }, cache);\n                                }\n                                catch (error) {\n                                    process.env.NODE_ENV === \"production\" || invariant.error(error);\n                                }\n                            }, mutationId);\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            try {\n                                                markMutationResult({\n                                                    mutationId: mutationId,\n                                                    result: result,\n                                                    document: mutation,\n                                                    variables: variables,\n                                                    queryUpdatersById: generateUpdateQueriesInfo(),\n                                                    update: updateWithProxyFn,\n                                                }, self.cache);\n                                            }\n                                            catch (e) {\n                                                error = new ApolloError({\n                                                    networkError: e,\n                                                });\n                                                return;\n                                            }\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        }, reject);\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = forLink && this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this.cache);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        this.queries.set(observable.queryId, queryInfo);\n        queryInfo.init({\n            document: options.query,\n            observableQuery: observable,\n            variables: options.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query, 16) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 17) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 18) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 19) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        var queryId = this.generateQueryId();\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(20) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        this.mutationStore.reset();\n        return this.cache.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.getQuery(queryId).setDiff(null);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables, _b = _a.context, context = _b === void 0 ? {} : _b;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    if (!graphQLResultHasError(result)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link = _b.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.cleanup(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n        var lastRequestId = queryInfo.lastRequestId;\n        return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n            var hasErrors = isNonEmptyArray(result.errors);\n            if (lastRequestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                queryInfo.markResult(result, options, allowCacheWrite);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = result.errors;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (lastRequestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var oldNetworkStatus = queryInfo.networkStatus;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var mightUseNetwork = fetchPolicy === \"cache-first\" ||\n            fetchPolicy === \"cache-and-network\" ||\n            fetchPolicy === \"network-only\" ||\n            fetchPolicy === \"no-cache\";\n        if (mightUseNetwork &&\n            notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus)) {\n            if (fetchPolicy !== \"cache-first\") {\n                fetchPolicy = \"cache-and-network\";\n            }\n            returnPartialData = true;\n        }\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n        };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            Promise.resolve().then(function () { return concast.cancel(reason); });\n        });\n        var concast = new Concast(this.transform(normalized.query).hasClientExports\n            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)\n            : fromVariables(normalized.variables));\n        concast.cleanup(function () {\n            _this.fetchCancelFns.delete(queryId);\n            if (options.nextFetchPolicy) {\n                options.fetchPolicy = options.nextFetchPolicy;\n                options.nextFetchPolicy = void 0;\n            }\n        });\n        return concast;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n        var _this = this;\n        var query = options.query, variables = options.variables, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, returnPartialData = options.returnPartialData, context = options.context;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            lastRequestId: this.generateRequestId(),\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(variables); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (process.env.NODE_ENV !== 'production' &&\n                isNonEmptyArray(diff.missing) &&\n                !equal(data, {})) {\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) { return m.path.join('.'); }).join(', '), diff.missing);\n            }\n            var fromData = function (data) { return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true }))); };\n            if (_this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data); });\n            }\n            return fromData(data);\n        };\n        var resultsFromLink = function (allowCacheWrite) {\n            return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ];\n                }\n                if (returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-only\":\n                return [\n                    resultsFromCache(readCache(), queryInfo.markReady()),\n                ];\n            case \"network-only\":\n                return [resultsFromLink(true)];\n            case \"no-cache\":\n                return [resultsFromLink(false)];\n            case \"standby\":\n                return [];\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this.cache));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\nfunction markMutationResult(mutation, cache) {\n    if (!graphQLResultHasError(mutation.result)) {\n        var cacheWrites_1 = [{\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            }];\n        var queryUpdatersById_1 = mutation.queryUpdatersById;\n        if (queryUpdatersById_1) {\n            Object.keys(queryUpdatersById_1).forEach(function (id) {\n                var _a = queryUpdatersById_1[id], updater = _a.updater, _b = _a.queryInfo, document = _b.document, variables = _b.variables;\n                var _c = cache.diff({\n                    query: document,\n                    variables: variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                }), currentQueryResult = _c.result, complete = _c.complete;\n                if (complete && currentQueryResult) {\n                    var nextQueryResult = updater(currentQueryResult, {\n                        mutationResult: mutation.result,\n                        queryName: getOperationName(document) || undefined,\n                        queryVariables: variables,\n                    });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: document,\n                            variables: variables,\n                        });\n                    }\n                }\n            });\n        }\n        cache.performTransaction(function (c) {\n            cacheWrites_1.forEach(function (write) { return c.write(write); });\n            var update = mutation.update;\n            if (update) {\n                update(c, mutation.result);\n            }\n        }, null);\n    }\n}\n//# sourceMappingURL=QueryManager.js.map"]},"metadata":{},"sourceType":"module"}