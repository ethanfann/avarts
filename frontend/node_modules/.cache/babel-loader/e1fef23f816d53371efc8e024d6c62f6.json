{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport { invariant } from 'ts-invariant';\nexport var defaultMapPropsToOptions = function () {\n  return {};\n};\nexport var defaultMapResultToProps = function (props) {\n  return props;\n};\nexport var defaultMapPropsToSkip = function () {\n  return false;\n};\nexport function getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nexport function calculateVariablesFromProps(operation, props) {\n  var variables = {};\n\n  for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\n    var _b = _a[_i],\n        variable = _b.variable,\n        type = _b.type;\n    if (!variable.name || !variable.name.value) continue;\n    var variableName = variable.name.value;\n    var variableProp = props[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n\n  return variables;\n}\n\nvar GraphQLBase = function (_super) {\n  __extends(GraphQLBase, _super);\n\n  function GraphQLBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.withRef = false;\n    _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n    return _this;\n  }\n\n  GraphQLBase.prototype.getWrappedInstance = function () {\n    process.env.NODE_ENV === \"production\" ? invariant(this.withRef, 30) : invariant(this.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\n    return this.wrappedInstance;\n  };\n\n  GraphQLBase.prototype.setWrappedInstance = function (ref) {\n    this.wrappedInstance = ref;\n  };\n\n  return GraphQLBase;\n}(React.Component);\n\nexport { GraphQLBase };","map":{"version":3,"sources":["../../../src/react/hoc/hoc-utils.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,SAAT,QAA0B,cAA1B;AAIA,OAAO,IAAM,wBAAwB,GAAG,YAAA;AAAM,SAAA,EAAA;AAAI,CAA3C;AACP,OAAO,IAAM,uBAAuB,GAAuB,UAAA,KAAA,EAAK;AAAI,SAAA,KAAA;AAAK,CAAlE;AACP,OAAO,IAAM,qBAAqB,GAAG,YAAA;AAAM,SAAA,KAAA;AAAK,CAAzC;AAEP,OAAM,SAAU,cAAV,CAA4B,gBAA5B,EAAoE;AACxE,SAAO,gBAAgB,CAAC,WAAjB,IAAgC,gBAAgB,CAAC,IAAjD,IAAyD,WAAhE;AACD;AAED,OAAM,SAAU,2BAAV,CACJ,SADI,EAEJ,KAFI,EAES;AAEb,MAAI,SAAS,GAAuB,EAApC;;AACA,OAA+B,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAS,CAAC,SAAzC,EAA+B,EAAA,GAAA,EAAA,CAAA,MAA/B,EAA+B,EAAA,EAA/B,EAAoD;AAA3C,QAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA;AAAA,QAAE,QAAQ,GAAA,EAAA,CAAA,QAAV;AAAA,QAAY,IAAI,GAAA,EAAA,CAAA,IAAhB;AACP,QAAI,CAAC,QAAQ,CAAC,IAAV,IAAkB,CAAC,QAAQ,CAAC,IAAT,CAAc,KAArC,EAA4C;AAE5C,QAAM,YAAY,GAAG,QAAQ,CAAC,IAAT,CAAc,KAAnC;AACA,QAAM,YAAY,GAAI,KAAa,CAAC,YAAD,CAAnC;;AAEA,QAAI,OAAO,YAAP,KAAwB,WAA5B,EAAyC;AACvC,MAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,YAA1B;AACA;AACD;;AAGD,QAAI,IAAI,CAAC,IAAL,KAAc,aAAlB,EAAiC;AAC/B,MAAA,SAAS,CAAC,YAAD,CAAT,GAA0B,SAA1B;AACD;AACF;;AACD,SAAO,SAAP;AACD;;AAOD,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;AAIU,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAKR,WAAA,WAAA,CAAY,KAAZ,EAAyB;AAAzB,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,KAAN,KAAY,IADd;;AAJO,IAAA,KAAA,CAAA,OAAA,GAAmB,KAAnB;AAML,IAAA,KAAI,CAAC,kBAAL,GAA0B,KAAI,CAAC,kBAAL,CAAwB,IAAxB,CAA6B,KAA7B,CAA1B;;AACD;;AAED,EAAA,WAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AACE,IAAA,OAAA,CAAA,GAAA,CACE,QADF,KAEE,YAFF,GAEE,SAAA,CAAA,KAAA,OAAA,EAAA,EAAA,CAFF,GAEE,SAAsD,CAAA,KAAA,OAAA,EAAA,yDACpD,kCADoD,CAFxD;AAMA,WAAO,KAAK,eAAZ;AACD,GARD;;AAUA,EAAA,WAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,GAAnB,EAAyD;AACvD,SAAK,eAAL,GAAuB,GAAvB;AACD,GAFD;;AAGF,SAAA,WAAA;AAAC,CA3BD,CAIU,KAAK,CAAC,SAJhB,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport React from 'react';\nimport { invariant } from 'ts-invariant';\nexport var defaultMapPropsToOptions = function () { return ({}); };\nexport var defaultMapResultToProps = function (props) { return props; };\nexport var defaultMapPropsToSkip = function () { return false; };\nexport function getDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nexport function calculateVariablesFromProps(operation, props) {\n    var variables = {};\n    for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\n        var _b = _a[_i], variable = _b.variable, type = _b.type;\n        if (!variable.name || !variable.name.value)\n            continue;\n        var variableName = variable.name.value;\n        var variableProp = props[variableName];\n        if (typeof variableProp !== 'undefined') {\n            variables[variableName] = variableProp;\n            continue;\n        }\n        if (type.kind !== 'NonNullType') {\n            variables[variableName] = undefined;\n        }\n    }\n    return variables;\n}\nvar GraphQLBase = (function (_super) {\n    __extends(GraphQLBase, _super);\n    function GraphQLBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this.withRef = false;\n        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n        return _this;\n    }\n    GraphQLBase.prototype.getWrappedInstance = function () {\n        process.env.NODE_ENV === \"production\" ? invariant(this.withRef, 30) : invariant(this.withRef, \"To access the wrapped instance, you need to specify \" +\n            \"{ withRef: true } in the options\");\n        return this.wrappedInstance;\n    };\n    GraphQLBase.prototype.setWrappedInstance = function (ref) {\n        this.wrappedInstance = ref;\n    };\n    return GraphQLBase;\n}(React.Component));\nexport { GraphQLBase };\n//# sourceMappingURL=hoc-utils.js.map"]},"metadata":{},"sourceType":"module"}