{"ast":null,"code":"const decToHex = dec => (dec < 16 ? '0' : '') + dec.toString(16);\n\nconst hexToDec = hex => parseInt(hex, 16);\n\nexport const rgbToHexString = rgb => decToHex(rgb[0]) + decToHex(rgb[1]) + decToHex(rgb[2]);\nexport const hexStringToRGB = hexString => {\n  const s = hexString.replace('#', '');\n  return [hexToDec(s.substr(0, 2)), hexToDec(s.substr(2, 2)), hexToDec(s.substr(4, 2))];\n}; // sRGB: starting RGB color, like [255, 0, 0]\n// eRGB: ending RGB color, like [122, 122, 122]\n// numSteps: number of steps in the gradient\n\nexport function createSpectrum(sRGB, eRGB, numSteps) {\n  const colors = [];\n\n  for (let i = 0; i < numSteps; i++) {\n    const r = Math.round((eRGB[0] - sRGB[0]) * i / numSteps) + sRGB[0];\n    const g = Math.round((eRGB[1] - sRGB[1]) * i / numSteps) + sRGB[1];\n    const b = Math.round((eRGB[2] - sRGB[2]) * i / numSteps) + sRGB[2];\n    colors.push(rgbToHexString([r, g, b]));\n  }\n\n  return colors;\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/utils/color.ts"],"names":["decToHex","dec","toString","hexToDec","hex","parseInt","rgbToHexString","rgb","hexStringToRGB","hexString","s","replace","substr","createSpectrum","sRGB","eRGB","numSteps","colors","i","r","Math","round","g","b","push"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,GAAD,IAAiB,CAACA,GAAG,GAAG,EAAN,GAAW,GAAX,GAAiB,EAAlB,IAAwBA,GAAG,CAACC,QAAJ,CAAa,EAAb,CAA1D;;AACA,MAAMC,QAAQ,GAAIC,GAAD,IAAiBC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAA1C;;AAEA,OAAO,MAAME,cAAc,GAAIC,GAAD,IAC5BP,QAAQ,CAACO,GAAG,CAAC,CAAD,CAAJ,CAAR,GAAmBP,QAAQ,CAACO,GAAG,CAAC,CAAD,CAAJ,CAA3B,GAAsCP,QAAQ,CAACO,GAAG,CAAC,CAAD,CAAJ,CADzC;AAEP,OAAO,MAAMC,cAAc,GAAIC,SAAD,IAAoB;AAChD,QAAMC,CAAC,GAAGD,SAAS,CAACE,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAV;AACA,SAAO,CACLR,QAAQ,CAACO,CAAC,CAACE,MAAF,CAAS,CAAT,EAAY,CAAZ,CAAD,CADH,EAELT,QAAQ,CAACO,CAAC,CAACE,MAAF,CAAS,CAAT,EAAY,CAAZ,CAAD,CAFH,EAGLT,QAAQ,CAACO,CAAC,CAACE,MAAF,CAAS,CAAT,EAAY,CAAZ,CAAD,CAHH,CAAP;AAKD,CAPM,C,CASP;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CACLC,IADK,EAELC,IAFK,EAGLC,QAHK,EAIL;AACA,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8BE,CAAC,EAA/B,EAAmC;AACjC,UAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAY,CAACN,IAAI,CAAC,CAAD,CAAJ,GAAUD,IAAI,CAAC,CAAD,CAAf,IAAsBI,CAAvB,GAA4BF,QAAvC,IAAmDF,IAAI,CAAC,CAAD,CAAjE;AACA,UAAMQ,CAAC,GAAGF,IAAI,CAACC,KAAL,CAAY,CAACN,IAAI,CAAC,CAAD,CAAJ,GAAUD,IAAI,CAAC,CAAD,CAAf,IAAsBI,CAAvB,GAA4BF,QAAvC,IAAmDF,IAAI,CAAC,CAAD,CAAjE;AACA,UAAMS,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAY,CAACN,IAAI,CAAC,CAAD,CAAJ,GAAUD,IAAI,CAAC,CAAD,CAAf,IAAsBI,CAAvB,GAA4BF,QAAvC,IAAmDF,IAAI,CAAC,CAAD,CAAjE;AACAG,IAAAA,MAAM,CAACO,IAAP,CAAYlB,cAAc,CAAC,CAACa,CAAD,EAAIG,CAAJ,EAAOC,CAAP,CAAD,CAA1B;AACD;;AACD,SAAON,MAAP;AACD","sourcesContent":["const decToHex = (dec: number) => (dec < 16 ? '0' : '') + dec.toString(16)\nconst hexToDec = (hex: string) => parseInt(hex, 16)\n\nexport const rgbToHexString = (rgb: any) =>\n  decToHex(rgb[0]) + decToHex(rgb[1]) + decToHex(rgb[2])\nexport const hexStringToRGB = (hexString: any) => {\n  const s = hexString.replace('#', '')\n  return [\n    hexToDec(s.substr(0, 2)),\n    hexToDec(s.substr(2, 2)),\n    hexToDec(s.substr(4, 2)),\n  ]\n}\n\n// sRGB: starting RGB color, like [255, 0, 0]\n// eRGB: ending RGB color, like [122, 122, 122]\n// numSteps: number of steps in the gradient\nexport function createSpectrum(\n  sRGB: Array<number>,\n  eRGB: Array<number>,\n  numSteps: number\n) {\n  const colors = []\n  for (let i = 0; i < numSteps; i++) {\n    const r = Math.round(((eRGB[0] - sRGB[0]) * i) / numSteps) + sRGB[0]\n    const g = Math.round(((eRGB[1] - sRGB[1]) * i) / numSteps) + sRGB[1]\n    const b = Math.round(((eRGB[2] - sRGB[2]) * i) / numSteps) + sRGB[2]\n    colors.push(rgbToHexString([r, g, b]))\n  }\n  return colors\n}\n"]},"metadata":{},"sourceType":"module"}