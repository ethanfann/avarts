{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray } from \"../utilities/index.js\";\nimport { Reobserver } from \"./Reobserver.js\";\nvar warnedAboutUpdateQuery = false;\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        queryInfo = _a.queryInfo,\n        options = _a.options;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.observer = {\n      next: function (result) {\n        if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n          _this.updateLastResult(result);\n\n          iterateObserversSafely(_this.observers, 'next', result);\n        }\n      },\n      error: function (error) {\n        _this.updateLastResult(__assign(__assign({}, _this.lastResult), {\n          errors: error.graphQLErrors,\n          networkStatus: NetworkStatus.error,\n          loading: false\n        }));\n\n        iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n      }\n    };\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.queryId = queryManager.generateQueryId();\n    var opDef = getOperationDefinition(options.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    _this.queryManager = queryManager;\n    _this.queryInfo = queryInfo;\n    return _this;\n  }\n\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function () {\n    var _a = this,\n        lastResult = _a.lastResult,\n        lastError = _a.lastError;\n\n    var networkStatus = this.queryInfo.networkStatus || NetworkStatus.ready;\n\n    var result = __assign(__assign({}, lastError ? {\n      error: lastError\n    } : lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n\n    if (this.isTornDown) {\n      return result;\n    }\n\n    var _b = this.options.fetchPolicy,\n        fetchPolicy = _b === void 0 ? 'cache-first' : _b;\n\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      result.partial = false;\n    } else if (!result.data || !this.queryManager.transform(this.options.query).hasForcedResolvers) {\n      var diff = this.queryInfo.getDiff();\n      result.partial = !diff.complete;\n      result.data = diff.complete || this.options.returnPartialData ? diff.result : void 0;\n\n      if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n        result.networkStatus = NetworkStatus.ready;\n        result.loading = false;\n      }\n    }\n\n    this.updateLastResult(result);\n    return result;\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    return !equal(this.lastResultSnapshot, newResult);\n  };\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(12) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n\n    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n      reobserveOptions.fetchPolicy = 'network-only';\n      reobserveOptions.nextFetchPolicy = fetchPolicy;\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n\n    return this.newReobserver(false).reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n\n    var qid = this.queryManager.generateQueryId();\n\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      var currentResult = this.getCurrentResult();\n      this.queryInfo.networkStatus = NetworkStatus.fetchMore;\n      this.observer.next(__assign(__assign({}, currentResult), {\n        loading: true,\n        networkStatus: NetworkStatus.fetchMore\n      }));\n    }\n\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      var data = fetchMoreResult.data;\n      var updateQuery = fetchMoreOptions.updateQuery;\n\n      if (updateQuery) {\n        if (process.env.NODE_ENV !== \"production\" && !warnedAboutUpdateQuery) {\n          process.env.NODE_ENV === \"production\" || invariant.warn(\"The updateQuery callback for fetchMore is deprecated, and will be removed\\nin the next major version of Apollo Client.\\n\\nPlease convert updateQuery functions to field policies with appropriate\\nread and merge functions, or use/adapt a helper function (such as\\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\\n@apollo/client/utilities.\\n\\nThe field policy system handles pagination more effectively than a\\nhand-written updateQuery function, and you only need to define the policy\\nonce, rather than every time you call fetchMore.\");\n          warnedAboutUpdateQuery = true;\n        }\n\n        _this.updateQuery(function (previous) {\n          return updateQuery(previous, {\n            fetchMoreResult: data,\n            variables: combinedOptions.variables\n          });\n        });\n      } else {\n        _this.queryManager.cache.writeQuery({\n          query: combinedOptions.query,\n          variables: combinedOptions.variables,\n          data: data\n        });\n      }\n\n      return fetchMoreResult;\n    }).finally(function () {\n      _this.queryManager.stopQuery(qid);\n\n      _this.reobserve();\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    var _a = this.options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? 'cache-first' : _a;\n\n    if (fetchPolicy !== 'cache-first' && fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n      fetchPolicy = 'cache-and-network';\n    }\n\n    return this.reobserve({\n      fetchPolicy: fetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var _a;\n\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      previousResult: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.getReobserver().updateOptions({\n      pollInterval: pollInterval\n    });\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    if (this.reobserver) {\n      this.reobserver.updateOptions({\n        pollInterval: 0\n      });\n    }\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult) {\n    var previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);\n\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.lastError;\n    }\n\n    return previousResult;\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n\n    if (observer === this.observer) {\n      return function () {};\n    }\n\n    try {\n      var subObserver = observer._subscription._observer;\n\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch (_a) {}\n\n    var first = !this.observers.size;\n    this.observers.add(observer);\n\n    if (this.lastError) {\n      observer.error && observer.error(this.lastError);\n    } else if (this.lastResult) {\n      observer.next && observer.next(this.lastResult);\n    }\n\n    if (first) {\n      this.reobserve().catch(function (_) {});\n    }\n\n    return function () {\n      if (_this.observers.delete(observer) && !_this.observers.size) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.getReobserver = function () {\n    return this.reobserver || (this.reobserver = this.newReobserver(true));\n  };\n\n  ObservableQuery.prototype.newReobserver = function (shareOptions) {\n    var _this = this;\n\n    var _a = this,\n        queryManager = _a.queryManager,\n        queryId = _a.queryId;\n\n    queryManager.setObservableQuery(this);\n    return new Reobserver(this.observer, shareOptions ? this.options : __assign({}, this.options), function (currentOptions, newNetworkStatus) {\n      queryManager.setObservableQuery(_this);\n      return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);\n    }, !queryManager.ssrMode && function () {\n      return !isNetworkRequestInFlight(_this.queryInfo.networkStatus);\n    });\n  };\n\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    this.isTornDown = false;\n    return this.getReobserver().reobserve(newOptions, newNetworkStatus);\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    var queryManager = this.queryManager;\n\n    if (this.reobserver) {\n      this.reobserver.stop();\n      delete this.reobserver;\n    }\n\n    this.isTornDown = true;\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery };\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}","map":{"version":3,"sources":["../../src/core/ObservableQuery.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, } from \"../utilities/index.js\";\nimport { Reobserver } from \"./Reobserver.js\";\nvar warnedAboutUpdateQuery = false;\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.observer = {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    _this.updateLastResult(result);\n                    iterateObserversSafely(_this.observers, 'next', result);\n                }\n            },\n            error: function (error) {\n                _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n                iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n            },\n        };\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.queryId = queryManager.generateQueryId();\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        _this.queryInfo = queryInfo;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        var _a = this, lastResult = _a.lastResult, lastError = _a.lastError;\n        var networkStatus = this.queryInfo.networkStatus || NetworkStatus.ready;\n        var result = __assign(__assign({}, (lastError ? { error: lastError } : lastResult)), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });\n        if (this.isTornDown) {\n            return result;\n        }\n        var _b = this.options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b;\n        if (fetchPolicy === 'no-cache' ||\n            fetchPolicy === 'network-only') {\n            result.partial = false;\n        }\n        else if (!result.data ||\n            !this.queryManager.transform(this.options.query).hasForcedResolvers) {\n            var diff = this.queryInfo.getDiff();\n            result.partial = !diff.complete;\n            result.data = (diff.complete ||\n                this.options.returnPartialData) ? diff.result : void 0;\n            if (diff.complete &&\n                result.networkStatus === NetworkStatus.loading &&\n                (fetchPolicy === 'cache-first' ||\n                    fetchPolicy === 'cache-only')) {\n                result.networkStatus = NetworkStatus.ready;\n                result.loading = false;\n            }\n        }\n        this.updateLastResult(result);\n        return result;\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        return !equal(this.lastResultSnapshot, newResult);\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(12) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        var reobserveOptions = {\n            pollInterval: 0,\n        };\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            reobserveOptions.fetchPolicy = 'network-only';\n            reobserveOptions.nextFetchPolicy = fetchPolicy;\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        return this.newReobserver(false).reobserve(reobserveOptions, NetworkStatus.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) }))), { fetchPolicy: \"no-cache\" });\n        var qid = this.queryManager.generateQueryId();\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            var currentResult = this.getCurrentResult();\n            this.queryInfo.networkStatus = NetworkStatus.fetchMore;\n            this.observer.next(__assign(__assign({}, currentResult), { loading: true, networkStatus: NetworkStatus.fetchMore }));\n        }\n        return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n            var data = fetchMoreResult.data;\n            var updateQuery = fetchMoreOptions.updateQuery;\n            if (updateQuery) {\n                if (process.env.NODE_ENV !== \"production\" &&\n                    !warnedAboutUpdateQuery) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"The updateQuery callback for fetchMore is deprecated, and will be removed\\nin the next major version of Apollo Client.\\n\\nPlease convert updateQuery functions to field policies with appropriate\\nread and merge functions, or use/adapt a helper function (such as\\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\\n@apollo/client/utilities.\\n\\nThe field policy system handles pagination more effectively than a\\nhand-written updateQuery function, and you only need to define the policy\\nonce, rather than every time you call fetchMore.\");\n                    warnedAboutUpdateQuery = true;\n                }\n                _this.updateQuery(function (previous) { return updateQuery(previous, {\n                    fetchMoreResult: data,\n                    variables: combinedOptions.variables,\n                }); });\n            }\n            else {\n                _this.queryManager.cache.writeQuery({\n                    query: combinedOptions.query,\n                    variables: combinedOptions.variables,\n                    data: data,\n                });\n            }\n            return fetchMoreResult;\n        }).finally(function () {\n            _this.queryManager.stopQuery(qid);\n            _this.reobserve();\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            return this.observers.size\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? 'cache-first' : _a;\n        if (fetchPolicy !== 'cache-first' &&\n            fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'network-only') {\n            fetchPolicy = 'cache-and-network';\n        }\n        return this.reobserve({\n            fetchPolicy: fetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _a;\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            previousResult: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.getReobserver().updateOptions({ pollInterval: pollInterval });\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        if (this.reobserver) {\n            this.reobserver.updateOptions({ pollInterval: 0 });\n        }\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        if (!isNonEmptyArray(newResult.errors)) {\n            delete this.lastError;\n        }\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer === this.observer) {\n            return function () { };\n        }\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (this.lastError) {\n            observer.error && observer.error(this.lastError);\n        }\n        else if (this.lastResult) {\n            observer.next && observer.next(this.lastResult);\n        }\n        if (first) {\n            this.reobserve().catch(function (_) {\n            });\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.getReobserver = function () {\n        return this.reobserver || (this.reobserver = this.newReobserver(true));\n    };\n    ObservableQuery.prototype.newReobserver = function (shareOptions) {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        queryManager.setObservableQuery(this);\n        return new Reobserver(this.observer, shareOptions ? this.options : __assign({}, this.options), function (currentOptions, newNetworkStatus) {\n            queryManager.setObservableQuery(_this);\n            return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);\n        }, !queryManager.ssrMode && (function () { return !isNetworkRequestInFlight(_this.queryInfo.networkStatus); }));\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        this.isTornDown = false;\n        return this.getReobserver().reobserve(newOptions, newNetworkStatus);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        if (this.reobserver) {\n            this.reobserver.stop();\n            delete this.reobserver;\n        }\n        this.isTornDown = true;\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\n//# sourceMappingURL=ObservableQuery.js.map"]},"metadata":{},"sourceType":"module"}