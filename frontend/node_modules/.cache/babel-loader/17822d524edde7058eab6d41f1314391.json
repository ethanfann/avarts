{"ast":null,"code":"var simplify = require('simplify-geometry');\n\nmodule.exports = function (geojson, tolerance, dontClone) {\n  if (!dontClone) geojson = JSON.parse(JSON.stringify(geojson)); // clone obj\n\n  if (geojson.features) return simplifyFeatureCollection(geojson, tolerance);else if (geojson.type && geojson.type === 'Feature') return simplifyFeature(geojson, tolerance);else return new Error('FeatureCollection or individual Feature required');\n};\n\nmodule.exports.simplify = function (coordinates, tolerance) {\n  return simplify(coordinates, tolerance);\n}; // modifies in-place\n\n\nfunction simplifyFeature(feat, tolerance) {\n  var geom = feat.geometry;\n  var type = geom.type;\n\n  if (type === 'LineString') {\n    geom.coordinates = module.exports.simplify(geom.coordinates, tolerance);\n  } else if (type === 'Polygon' || type === 'MultiLineString') {\n    for (var j = 0; j < geom.coordinates.length; j++) {\n      geom.coordinates[j] = module.exports.simplify(geom.coordinates[j], tolerance);\n    }\n  } else if (type === 'MultiPolygon') {\n    for (var k = 0; k < geom.coordinates.length; k++) {\n      for (var l = 0; l < geom.coordinates[k].length; l++) {\n        geom.coordinates[k][l] = module.exports.simplify(geom.coordinates[k][l], tolerance);\n      }\n    }\n  }\n\n  return feat;\n} // modifies in-place\n\n\nfunction simplifyFeatureCollection(fc, tolerance) {\n  // process all LineString features, skip non LineStrings\n  for (var i = 0; i < fc.features.length; i++) {\n    fc.features[i] = simplifyFeature(fc.features[i], tolerance);\n  }\n\n  return fc;\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/simplify-geojson/index.js"],"names":["simplify","require","module","exports","geojson","tolerance","dontClone","JSON","parse","stringify","features","simplifyFeatureCollection","type","simplifyFeature","Error","coordinates","feat","geom","geometry","j","length","k","l","fc","i"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyC;AACxD,MAAI,CAACA,SAAL,EAAgBF,OAAO,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,OAAf,CAAX,CAAV,CADwC,CACM;;AAC9D,MAAIA,OAAO,CAACM,QAAZ,EAAsB,OAAOC,yBAAyB,CAACP,OAAD,EAAUC,SAAV,CAAhC,CAAtB,KACK,IAAID,OAAO,CAACQ,IAAR,IAAgBR,OAAO,CAACQ,IAAR,KAAiB,SAArC,EAAgD,OAAOC,eAAe,CAACT,OAAD,EAAUC,SAAV,CAAtB,CAAhD,KACA,OAAO,IAAIS,KAAJ,CAAU,kDAAV,CAAP;AACN,CALD;;AAOAZ,MAAM,CAACC,OAAP,CAAeH,QAAf,GAA0B,UAAUe,WAAV,EAAuBV,SAAvB,EAAkC;AAC1D,SAAOL,QAAQ,CAACe,WAAD,EAAcV,SAAd,CAAf;AACD,CAFD,C,CAIA;;;AACA,SAASQ,eAAT,CAA0BG,IAA1B,EAAgCX,SAAhC,EAA2C;AACzC,MAAIY,IAAI,GAAGD,IAAI,CAACE,QAAhB;AACA,MAAIN,IAAI,GAAGK,IAAI,CAACL,IAAhB;;AACA,MAAIA,IAAI,KAAK,YAAb,EAA2B;AACzBK,IAAAA,IAAI,CAACF,WAAL,GAAmBb,MAAM,CAACC,OAAP,CAAeH,QAAf,CAAwBiB,IAAI,CAACF,WAA7B,EAA0CV,SAA1C,CAAnB;AACD,GAFD,MAEO,IAAIO,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,iBAAnC,EAAsD;AAC3D,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACF,WAAL,CAAiBK,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChDF,MAAAA,IAAI,CAACF,WAAL,CAAiBI,CAAjB,IAAsBjB,MAAM,CAACC,OAAP,CAAeH,QAAf,CAAwBiB,IAAI,CAACF,WAAL,CAAiBI,CAAjB,CAAxB,EAA6Cd,SAA7C,CAAtB;AACD;AACF,GAJM,MAIA,IAAIO,IAAI,KAAK,cAAb,EAA6B;AAClC,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACF,WAAL,CAAiBK,MAArC,EAA6CC,CAAC,EAA9C,EAAkD;AAChD,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACF,WAAL,CAAiBM,CAAjB,EAAoBD,MAAxC,EAAgDE,CAAC,EAAjD,EAAqD;AACnDL,QAAAA,IAAI,CAACF,WAAL,CAAiBM,CAAjB,EAAoBC,CAApB,IAAyBpB,MAAM,CAACC,OAAP,CAAeH,QAAf,CAAwBiB,IAAI,CAACF,WAAL,CAAiBM,CAAjB,EAAoBC,CAApB,CAAxB,EAAgDjB,SAAhD,CAAzB;AACD;AACF;AACF;;AACD,SAAOW,IAAP;AACD,C,CAED;;;AACA,SAASL,yBAAT,CAAoCY,EAApC,EAAwClB,SAAxC,EAAmD;AACjD;AACA,OAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,EAAE,CAACb,QAAH,CAAYU,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;AAC3CD,IAAAA,EAAE,CAACb,QAAH,CAAYc,CAAZ,IAAiBX,eAAe,CAACU,EAAE,CAACb,QAAH,CAAYc,CAAZ,CAAD,EAAiBnB,SAAjB,CAAhC;AACD;;AACD,SAAOkB,EAAP;AACD","sourcesContent":["var simplify = require('simplify-geometry')\n\nmodule.exports = function (geojson, tolerance, dontClone) {\n  if (!dontClone) geojson = JSON.parse(JSON.stringify(geojson)) // clone obj\n  if (geojson.features) return simplifyFeatureCollection(geojson, tolerance)\n  else if (geojson.type && geojson.type === 'Feature') return simplifyFeature(geojson, tolerance)\n  else return new Error('FeatureCollection or individual Feature required')\n}\n\nmodule.exports.simplify = function (coordinates, tolerance) {\n  return simplify(coordinates, tolerance)\n}\n\n// modifies in-place\nfunction simplifyFeature (feat, tolerance) {\n  var geom = feat.geometry\n  var type = geom.type\n  if (type === 'LineString') {\n    geom.coordinates = module.exports.simplify(geom.coordinates, tolerance)\n  } else if (type === 'Polygon' || type === 'MultiLineString') {\n    for (var j = 0; j < geom.coordinates.length; j++) {\n      geom.coordinates[j] = module.exports.simplify(geom.coordinates[j], tolerance)\n    }\n  } else if (type === 'MultiPolygon') {\n    for (var k = 0; k < geom.coordinates.length; k++) {\n      for (var l = 0; l < geom.coordinates[k].length; l++) {\n        geom.coordinates[k][l] = module.exports.simplify(geom.coordinates[k][l], tolerance)\n      }\n    }\n  }\n  return feat\n}\n\n// modifies in-place\nfunction simplifyFeatureCollection (fc, tolerance) {\n  // process all LineString features, skip non LineStrings\n  for (var i = 0; i < fc.features.length; i++) {\n    fc.features[i] = simplifyFeature(fc.features[i], tolerance)\n  }\n  return fc\n}\n"]},"metadata":{},"sourceType":"script"}