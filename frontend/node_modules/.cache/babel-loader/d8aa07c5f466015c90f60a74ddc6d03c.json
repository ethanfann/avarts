{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.getElevationGain = exports.computeElevationGain = exports.movingAverageWithWindow = exports.sma = void 0;\n\nvar sma = function sma(arr, range, precision) {\n  if (!Array.isArray(arr)) {\n    throw TypeError('expected first argument to be an array');\n  }\n\n  precision = precision || 2;\n  var num = range || arr.length;\n  var res = [];\n  var len = arr.length + 1;\n  var idx = num - 1;\n\n  while (++idx < len) {\n    var value = avg(arr, idx, num);\n    res.push(round(value, precision));\n  }\n\n  return res;\n};\n\nexports.sma = sma;\n\nfunction round(value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n/**\n * Create an average for the specified range.\n *\n * @param  {Array} `arr` Array to pull the range from.\n * @param  {Number} `idx` Index of element being calculated\n * @param  {Number} `range` Size of range to calculate.\n * @return {Number} Average of range.\n */\n\n\nfunction avg(arr, idx, range) {\n  return sum(arr.slice(idx - range, idx)) / range;\n}\n/**\n * Calculate the sum of an array.\n * @param  {Array} `arr` Array\n * @return {Number} Sum\n */\n\n\nfunction sum(arr) {\n  var len = arr.length;\n  var num = 0;\n\n  while (len--) {\n    num += Number(arr[len]);\n  }\n\n  return num;\n}\n\nvar movingAverageWithWindow = function movingAverageWithWindow(numberOfPoints) {\n  return function (el, index, array) {\n    var center = Math.floor(numberOfPoints / 2);\n    var lowerBound = index - center;\n    var upperBound = index + center + 1;\n\n    if (index < center) {\n      return el;\n    }\n\n    if (upperBound > array.length) {\n      upperBound = array.length;\n    }\n\n    var acc = 0;\n    var windowing = array.slice(lowerBound, upperBound);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = windowing[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var ele = _step.value;\n        acc += ele;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return acc / numberOfPoints;\n  };\n};\n\nexports.movingAverageWithWindow = movingAverageWithWindow;\n\nvar computeElevationGain = function computeElevationGain(accumulator, currentValue, index, array) {\n  var previousValue = array[index - 1];\n  var delta = currentValue - previousValue; // Take only positive value\n\n  if (delta > 0) {\n    accumulator += delta;\n  }\n\n  return accumulator;\n};\n\nexports.computeElevationGain = computeElevationGain;\n\nvar getElevationGain = function getElevationGain(geojson, numberOfPoints) {\n  var coords = [];\n\n  if (geojson.geometry) {\n    coords = geojson.geometry.coordinates;\n  } else {\n    coords = geojson.coordinates;\n  }\n\n  var elevations = coords.map(function (x) {\n    return x[2];\n  });\n  var smaElevations = sma(elevations, numberOfPoints, 2);\n  return Math.round(smaElevations.reduce(computeElevationGain, 0));\n};\n\nexports.getElevationGain = getElevationGain;\nvar _default = {\n  movingAverageWithWindow: movingAverageWithWindow,\n  computeElevationGain: computeElevationGain,\n  getElevationGain: getElevationGain,\n  sma: sma\n};\nexports.default = _default;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/geojson-elevation-gain/build/geojson-elevation.js"],"names":["Object","defineProperty","exports","value","default","getElevationGain","computeElevationGain","movingAverageWithWindow","sma","arr","range","precision","Array","isArray","TypeError","num","length","res","len","idx","avg","push","round","decimals","Number","Math","sum","slice","numberOfPoints","el","index","array","center","floor","lowerBound","upperBound","acc","windowing","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","ele","err","return","accumulator","currentValue","previousValue","delta","geojson","coords","geometry","coordinates","elevations","map","x","smaElevations","reduce","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.getElevationGain = exports.computeElevationGain = exports.movingAverageWithWindow = exports.sma = void 0;\n\nvar sma = function sma(arr, range, precision) {\n  if (!Array.isArray(arr)) {\n    throw TypeError('expected first argument to be an array');\n  }\n\n  precision = precision || 2;\n  var num = range || arr.length;\n  var res = [];\n  var len = arr.length + 1;\n  var idx = num - 1;\n\n  while (++idx < len) {\n    var value = avg(arr, idx, num);\n    res.push(round(value, precision));\n  }\n\n  return res;\n};\n\nexports.sma = sma;\n\nfunction round(value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n/**\n * Create an average for the specified range.\n *\n * @param  {Array} `arr` Array to pull the range from.\n * @param  {Number} `idx` Index of element being calculated\n * @param  {Number} `range` Size of range to calculate.\n * @return {Number} Average of range.\n */\n\n\nfunction avg(arr, idx, range) {\n  return sum(arr.slice(idx - range, idx)) / range;\n}\n/**\n * Calculate the sum of an array.\n * @param  {Array} `arr` Array\n * @return {Number} Sum\n */\n\n\nfunction sum(arr) {\n  var len = arr.length;\n  var num = 0;\n\n  while (len--) {\n    num += Number(arr[len]);\n  }\n\n  return num;\n}\n\nvar movingAverageWithWindow = function movingAverageWithWindow(numberOfPoints) {\n  return function (el, index, array) {\n    var center = Math.floor(numberOfPoints / 2);\n    var lowerBound = index - center;\n    var upperBound = index + center + 1;\n\n    if (index < center) {\n      return el;\n    }\n\n    if (upperBound > array.length) {\n      upperBound = array.length;\n    }\n\n    var acc = 0;\n    var windowing = array.slice(lowerBound, upperBound);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = windowing[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var ele = _step.value;\n        acc += ele;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return acc / numberOfPoints;\n  };\n};\n\nexports.movingAverageWithWindow = movingAverageWithWindow;\n\nvar computeElevationGain = function computeElevationGain(accumulator, currentValue, index, array) {\n  var previousValue = array[index - 1];\n  var delta = currentValue - previousValue; // Take only positive value\n\n  if (delta > 0) {\n    accumulator += delta;\n  }\n\n  return accumulator;\n};\n\nexports.computeElevationGain = computeElevationGain;\n\nvar getElevationGain = function getElevationGain(geojson, numberOfPoints) {\n  var coords = [];\n\n  if (geojson.geometry) {\n    coords = geojson.geometry.coordinates;\n  } else {\n    coords = geojson.coordinates;\n  }\n\n  var elevations = coords.map(function (x) {\n    return x[2];\n  });\n  var smaElevations = sma(elevations, numberOfPoints, 2);\n  return Math.round(smaElevations.reduce(computeElevationGain, 0));\n};\n\nexports.getElevationGain = getElevationGain;\nvar _default = {\n  movingAverageWithWindow: movingAverageWithWindow,\n  computeElevationGain: computeElevationGain,\n  getElevationGain: getElevationGain,\n  sma: sma\n};\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}