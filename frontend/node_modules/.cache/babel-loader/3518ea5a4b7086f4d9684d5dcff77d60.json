{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar cssUnit = {\n  cm: true,\n  mm: true,\n  in: true,\n  px: true,\n  pt: true,\n  pc: true,\n  em: true,\n  ex: true,\n  ch: true,\n  rem: true,\n  vw: true,\n  vh: true,\n  vmin: true,\n  vmax: true,\n  \"%\": true\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\n\nfunction parseLengthAndUnit(size) {\n  if (typeof size === \"number\") {\n    return {\n      value: size,\n      unit: \"px\"\n    };\n  }\n\n  var value;\n  var valueString = size.match(/^[0-9.]*/).toString();\n\n  if (valueString.includes(\".\")) {\n    value = parseFloat(valueString);\n  } else {\n    value = parseInt(valueString, 10);\n  }\n\n  var unit = size.match(/[^0-9]*$/).toString();\n\n  if (cssUnit[unit]) {\n    return {\n      value: value,\n      unit: unit\n    };\n  }\n\n  console.warn(\"React Spinners: \" + size + \" is not a valid css value. Defaulting to \" + value + \"px.\");\n  return {\n    value: value,\n    unit: \"px\"\n  };\n}\n\nexports.parseLengthAndUnit = parseLengthAndUnit;\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\n\nfunction cssValue(value) {\n  var lengthWithunit = parseLengthAndUnit(value);\n  return \"\" + lengthWithunit.value + lengthWithunit.unit;\n}\n\nexports.cssValue = cssValue;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/node_modules/react-spinners/helpers/unitConverter.js"],"names":["Object","defineProperty","exports","value","cssUnit","cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","parseLengthAndUnit","size","unit","valueString","match","toString","includes","parseFloat","parseInt","console","warn","cssValue","lengthWithunit"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA,IAAIC,OAAO,GAAG;AACVC,EAAAA,EAAE,EAAE,IADM;AAEVC,EAAAA,EAAE,EAAE,IAFM;AAGVC,EAAAA,EAAE,EAAE,IAHM;AAIVC,EAAAA,EAAE,EAAE,IAJM;AAKVC,EAAAA,EAAE,EAAE,IALM;AAMVC,EAAAA,EAAE,EAAE,IANM;AAOVC,EAAAA,EAAE,EAAE,IAPM;AAQVC,EAAAA,EAAE,EAAE,IARM;AASVC,EAAAA,EAAE,EAAE,IATM;AAUVC,EAAAA,GAAG,EAAE,IAVK;AAWVC,EAAAA,EAAE,EAAE,IAXM;AAYVC,EAAAA,EAAE,EAAE,IAZM;AAaVC,EAAAA,IAAI,EAAE,IAbI;AAcVC,EAAAA,IAAI,EAAE,IAdI;AAeV,OAAK;AAfK,CAAd;AAiBA;;;;;;;;;;AASA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAC9B,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,WAAO;AACHjB,MAAAA,KAAK,EAAEiB,IADJ;AAEHC,MAAAA,IAAI,EAAE;AAFH,KAAP;AAIH;;AACD,MAAIlB,KAAJ;AACA,MAAImB,WAAW,GAAGF,IAAI,CAACG,KAAL,CAAW,UAAX,EAAuBC,QAAvB,EAAlB;;AACA,MAAIF,WAAW,CAACG,QAAZ,CAAqB,GAArB,CAAJ,EAA+B;AAC3BtB,IAAAA,KAAK,GAAGuB,UAAU,CAACJ,WAAD,CAAlB;AACH,GAFD,MAGK;AACDnB,IAAAA,KAAK,GAAGwB,QAAQ,CAACL,WAAD,EAAc,EAAd,CAAhB;AACH;;AACD,MAAID,IAAI,GAAGD,IAAI,CAACG,KAAL,CAAW,UAAX,EAAuBC,QAAvB,EAAX;;AACA,MAAIpB,OAAO,CAACiB,IAAD,CAAX,EAAmB;AACf,WAAO;AACHlB,MAAAA,KAAK,EAAEA,KADJ;AAEHkB,MAAAA,IAAI,EAAEA;AAFH,KAAP;AAIH;;AACDO,EAAAA,OAAO,CAACC,IAAR,CAAa,qBAAqBT,IAArB,GAA4B,2CAA5B,GAA0EjB,KAA1E,GAAkF,KAA/F;AACA,SAAO;AACHA,IAAAA,KAAK,EAAEA,KADJ;AAEHkB,IAAAA,IAAI,EAAE;AAFH,GAAP;AAIH;;AACDnB,OAAO,CAACiB,kBAAR,GAA6BA,kBAA7B;AACA;;;;;;;AAMA,SAASW,QAAT,CAAkB3B,KAAlB,EAAyB;AACrB,MAAI4B,cAAc,GAAGZ,kBAAkB,CAAChB,KAAD,CAAvC;AACA,SAAO,KAAK4B,cAAc,CAAC5B,KAApB,GAA4B4B,cAAc,CAACV,IAAlD;AACH;;AACDnB,OAAO,CAAC4B,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cssUnit = {\n    cm: true,\n    mm: true,\n    in: true,\n    px: true,\n    pt: true,\n    pc: true,\n    em: true,\n    ex: true,\n    ch: true,\n    rem: true,\n    vw: true,\n    vh: true,\n    vmin: true,\n    vmax: true,\n    \"%\": true\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nfunction parseLengthAndUnit(size) {\n    if (typeof size === \"number\") {\n        return {\n            value: size,\n            unit: \"px\"\n        };\n    }\n    var value;\n    var valueString = size.match(/^[0-9.]*/).toString();\n    if (valueString.includes(\".\")) {\n        value = parseFloat(valueString);\n    }\n    else {\n        value = parseInt(valueString, 10);\n    }\n    var unit = size.match(/[^0-9]*$/).toString();\n    if (cssUnit[unit]) {\n        return {\n            value: value,\n            unit: unit\n        };\n    }\n    console.warn(\"React Spinners: \" + size + \" is not a valid css value. Defaulting to \" + value + \"px.\");\n    return {\n        value: value,\n        unit: \"px\"\n    };\n}\nexports.parseLengthAndUnit = parseLengthAndUnit;\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nfunction cssValue(value) {\n    var lengthWithunit = parseLengthAndUnit(value);\n    return \"\" + lengthWithunit.value + lengthWithunit.unit;\n}\nexports.cssValue = cssValue;\n"]},"metadata":{},"sourceType":"script"}