{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/generated/graphql.tsx\";\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nexport const AddActivityCommentDocument = gql`\n  mutation AddActivityComment(\n    $comment: String!\n    $userId: ID!\n    $activityId: ID!\n  ) {\n    addActivityComment(\n      comment: $comment\n      userId: $userId\n      activityId: $activityId\n    ) {\n      id\n    }\n  }\n`;\nexport const AddActivityCommentComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: AddActivityCommentDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 3\n  }\n}));\nexport function withAddActivityComment(operationOptions) {\n  return ApolloReactHoc.withMutation(AddActivityCommentDocument, {\n    alias: 'addActivityComment',\n    ...operationOptions\n  });\n}\n/**\n * __useAddActivityCommentMutation__\n *\n * To run a mutation, you first call `useAddActivityCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddActivityCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addActivityCommentMutation, { data, loading, error }] = useAddActivityCommentMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      userId: // value for 'userId'\n *      activityId: // value for 'activityId'\n *   },\n * });\n */\n\nexport function useAddActivityCommentMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(AddActivityCommentDocument, baseOptions);\n}\nexport const DeleteActivityCommentDocument = gql`\n  mutation DeleteActivityComment($commentId: ID!) {\n    deleteActivityComment(commentId: $commentId) {\n      id\n    }\n  }\n`;\nexport const DeleteActivityCommentComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: DeleteActivityCommentDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 3\n  }\n}));\nexport function withDeleteActivityComment(operationOptions) {\n  return ApolloReactHoc.withMutation(DeleteActivityCommentDocument, {\n    alias: 'deleteActivityComment',\n    ...operationOptions\n  });\n}\n/**\n * __useDeleteActivityCommentMutation__\n *\n * To run a mutation, you first call `useDeleteActivityCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteActivityCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteActivityCommentMutation, { data, loading, error }] = useDeleteActivityCommentMutation({\n *   variables: {\n *      commentId: // value for 'commentId'\n *   },\n * });\n */\n\nexport function useDeleteActivityCommentMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(DeleteActivityCommentDocument, baseOptions);\n}\nexport const LoginDocument = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`;\nexport const LoginComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: LoginDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 486,\n    columnNumber: 3\n  }\n}));\nexport function withLogin(operationOptions) {\n  return ApolloReactHoc.withMutation(LoginDocument, {\n    alias: 'login',\n    ...operationOptions\n  });\n}\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\n\nexport function useLoginMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(LoginDocument, baseOptions);\n}\nexport const SignUpDocument = gql`\n  mutation signUp(\n    $email: String!\n    $firstName: String!\n    $lastName: String!\n    $password: String!\n    $passwordConfirmation: String!\n  ) {\n    signUp(\n      attributes: {\n        email: $email\n        firstName: $firstName\n        lastName: $lastName\n        password: $password\n        passwordConfirmation: $passwordConfirmation\n      }\n    ) {\n      token\n    }\n  }\n`;\nexport const SignUpComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: SignUpDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 596,\n    columnNumber: 3\n  }\n}));\nexport function withSignUp(operationOptions) {\n  return ApolloReactHoc.withMutation(SignUpDocument, {\n    alias: 'signUp',\n    ...operationOptions\n  });\n}\n/**\n * __useSignUpMutation__\n *\n * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signUpMutation, { data, loading, error }] = useSignUpMutation({\n *   variables: {\n *      email: // value for 'email'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      password: // value for 'password'\n *      passwordConfirmation: // value for 'passwordConfirmation'\n *   },\n * });\n */\n\nexport function useSignUpMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(SignUpDocument, baseOptions);\n}\nexport const UploadActivityDocument = gql`\n  mutation uploadActivity(\n    $title: String!\n    $description: String!\n    $geoJson: JSON!\n    $userId: ID!\n  ) {\n    upload(\n      title: $title\n      description: $description\n      geoJson: $geoJson\n      userId: $userId\n    ) {\n      id\n    }\n  }\n`;\nexport const UploadActivityComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Mutation, Object.assign({\n  mutation: UploadActivityDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 707,\n    columnNumber: 3\n  }\n}));\nexport function withUploadActivity(operationOptions) {\n  return ApolloReactHoc.withMutation(UploadActivityDocument, {\n    alias: 'uploadActivity',\n    ...operationOptions\n  });\n}\n/**\n * __useUploadActivityMutation__\n *\n * To run a mutation, you first call `useUploadActivityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadActivityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadActivityMutation, { data, loading, error }] = useUploadActivityMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      geoJson: // value for 'geoJson'\n *      userId: // value for 'userId'\n *   },\n * });\n */\n\nexport function useUploadActivityMutation(baseOptions) {\n  return ApolloReactHooks.useMutation(UploadActivityDocument, baseOptions);\n}\nexport const ActivitiesByUserIdDocument = gql`\n  query activitiesByUserId($userId: ID!) {\n    activitiesByUserId(userId: $userId) {\n      id\n      title\n      geoJson\n      createdAt\n      comments {\n        id\n        comment\n        user {\n          name\n          img\n        }\n      }\n    }\n  }\n`;\nexport const ActivitiesByUserIdComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Query, Object.assign({\n  query: ActivitiesByUserIdDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 823,\n    columnNumber: 3\n  }\n}));\nexport function withActivitiesByUserId(operationOptions) {\n  return ApolloReactHoc.withQuery(ActivitiesByUserIdDocument, {\n    alias: 'activitiesByUserId',\n    ...operationOptions\n  });\n}\n/**\n * __useActivitiesByUserIdQuery__\n *\n * To run a query within a React component, call `useActivitiesByUserIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useActivitiesByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useActivitiesByUserIdQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\n\nexport function useActivitiesByUserIdQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ActivitiesByUserIdDocument, baseOptions);\n}\nexport function useActivitiesByUserIdLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ActivitiesByUserIdDocument, baseOptions);\n}\nexport const MeDocument = gql`\n  query me {\n    me {\n      id\n      name\n      email\n      img\n      latestActivity {\n        title\n        createdAt\n      }\n      activityCount\n    }\n  }\n`;\nexport const MeComponent = props => /*#__PURE__*/React.createElement(ApolloReactComponents.Query, Object.assign({\n  query: MeDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 934,\n    columnNumber: 3\n  }\n}));\nexport function withMe(operationOptions) {\n  return ApolloReactHoc.withQuery(MeDocument, {\n    alias: 'me',\n    ...operationOptions\n  });\n}\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(MeDocument, baseOptions);\n}","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/generated/graphql.tsx"],"names":["ApolloReactComponents","ApolloReactHoc","ApolloReactHooks","gql","React","AddActivityCommentDocument","AddActivityCommentComponent","props","withAddActivityComment","operationOptions","withMutation","alias","useAddActivityCommentMutation","baseOptions","useMutation","DeleteActivityCommentDocument","DeleteActivityCommentComponent","withDeleteActivityComment","useDeleteActivityCommentMutation","LoginDocument","LoginComponent","withLogin","useLoginMutation","SignUpDocument","SignUpComponent","withSignUp","useSignUpMutation","UploadActivityDocument","UploadActivityComponent","withUploadActivity","useUploadActivityMutation","ActivitiesByUserIdDocument","ActivitiesByUserIdComponent","withActivitiesByUserId","withQuery","useActivitiesByUserIdQuery","useQuery","useActivitiesByUserIdLazyQuery","useLazyQuery","MeDocument","MeComponent","withMe","useMeQuery","useMeLazyQuery"],"mappings":"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","sourcesContent":["import * as ApolloReactCommon from '@apollo/react-common'\nimport * as ApolloReactComponents from '@apollo/react-components'\nimport * as ApolloReactHoc from '@apollo/react-hoc'\nimport * as ApolloReactHooks from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport * as React from 'react'\nexport type Maybe<T> = T | null\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K]\n}\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string\n  String: string\n  Boolean: boolean\n  Int: number\n  Float: number\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any\n  /** Represents untyped JSON */\n  JSON: any\n}\n\nexport type Activity = {\n  __typename?: 'Activity'\n  comments: Array<ActivityComment>\n  createdAt: Scalars['ISO8601DateTime']\n  description: Scalars['String']\n  geoJson: Scalars['JSON']\n  id: Scalars['ID']\n  title: Scalars['String']\n  updatedAt: Scalars['ISO8601DateTime']\n  userId: Scalars['ID']\n}\n\nexport type ActivityComment = {\n  __typename?: 'ActivityComment'\n  comment: Scalars['String']\n  createdAt: Scalars['ISO8601DateTime']\n  id: Scalars['ID']\n  updatedAt: Scalars['ISO8601DateTime']\n  user: User\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation'\n  addActivityComment?: Maybe<ActivityComment>\n  deleteActivityComment?: Maybe<ActivityComment>\n  /** Login for users */\n  login?: Maybe<User>\n  /** Logout for users */\n  logout?: Maybe<Scalars['Boolean']>\n  /** Unlock the user account */\n  resendUnlockInstructions: Scalars['Boolean']\n  /** Set the new password */\n  resetPassword?: Maybe<Scalars['Boolean']>\n  /** Send password reset instructions to users email */\n  sendResetPasswordInstructions?: Maybe<Scalars['Boolean']>\n  /** Sign up for users */\n  signUp?: Maybe<User>\n  /** JWT token login */\n  tokenLogin?: Maybe<User>\n  /** Unlock the user account */\n  unlock: Scalars['Boolean']\n  /** Update user */\n  updateUser?: Maybe<User>\n  upload?: Maybe<Activity>\n}\n\nexport type MutationAddActivityCommentArgs = {\n  activityId: Scalars['ID']\n  comment: Scalars['String']\n  userId: Scalars['ID']\n}\n\nexport type MutationDeleteActivityCommentArgs = {\n  commentId: Scalars['ID']\n}\n\nexport type MutationLoginArgs = {\n  email: Scalars['String']\n  password: Scalars['String']\n}\n\nexport type MutationResendUnlockInstructionsArgs = {\n  email: Scalars['String']\n}\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String']\n  passwordConfirmation: Scalars['String']\n  resetPasswordToken: Scalars['String']\n}\n\nexport type MutationSendResetPasswordInstructionsArgs = {\n  email: Scalars['String']\n}\n\nexport type MutationSignUpArgs = {\n  attributes: UserInput\n}\n\nexport type MutationUnlockArgs = {\n  unlockToken: Scalars['String']\n}\n\nexport type MutationUpdateUserArgs = {\n  password?: Maybe<Scalars['String']>\n  passwordConfirmation?: Maybe<Scalars['String']>\n}\n\nexport type MutationUploadArgs = {\n  description: Scalars['String']\n  geoJson: Scalars['JSON']\n  title: Scalars['String']\n  userId: Scalars['ID']\n}\n\nexport type Query = {\n  __typename?: 'Query'\n  /** Returns the activities belonging to the specified user_id */\n  activitiesByUserId?: Maybe<Array<Activity>>\n  /** Returns the current user */\n  me?: Maybe<User>\n}\n\nexport type QueryActivitiesByUserIdArgs = {\n  userId: Scalars['ID']\n}\n\nexport type User = {\n  __typename?: 'User'\n  activityCount?: Maybe<Scalars['Int']>\n  createdAt: Scalars['ISO8601DateTime']\n  email?: Maybe<Scalars['String']>\n  firstName: Scalars['String']\n  id: Scalars['ID']\n  img: Scalars['String']\n  lastName: Scalars['String']\n  latestActivity?: Maybe<Activity>\n  name: Scalars['String']\n  token: Scalars['String']\n  updatedAt: Scalars['ISO8601DateTime']\n}\n\n/** Attributes to create a user. */\nexport type UserInput = {\n  /** Email of user */\n  email: Scalars['String']\n  /** Firstname of user */\n  firstName: Scalars['String']\n  /** Lastname of user */\n  lastName: Scalars['String']\n  /** Password of user */\n  password: Scalars['String']\n  /** Password confirmation */\n  passwordConfirmation: Scalars['String']\n}\n\nexport type AddActivityCommentMutationVariables = Exact<{\n  comment: Scalars['String']\n  userId: Scalars['ID']\n  activityId: Scalars['ID']\n}>\n\nexport type AddActivityCommentMutation = { __typename?: 'Mutation' } & {\n  addActivityComment?: Maybe<\n    { __typename?: 'ActivityComment' } & Pick<ActivityComment, 'id'>\n  >\n}\n\nexport type DeleteActivityCommentMutationVariables = Exact<{\n  commentId: Scalars['ID']\n}>\n\nexport type DeleteActivityCommentMutation = { __typename?: 'Mutation' } & {\n  deleteActivityComment?: Maybe<\n    { __typename?: 'ActivityComment' } & Pick<ActivityComment, 'id'>\n  >\n}\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String']\n  password: Scalars['String']\n}>\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login?: Maybe<{ __typename?: 'User' } & Pick<User, 'token'>>\n}\n\nexport type SignUpMutationVariables = Exact<{\n  email: Scalars['String']\n  firstName: Scalars['String']\n  lastName: Scalars['String']\n  password: Scalars['String']\n  passwordConfirmation: Scalars['String']\n}>\n\nexport type SignUpMutation = { __typename?: 'Mutation' } & {\n  signUp?: Maybe<{ __typename?: 'User' } & Pick<User, 'token'>>\n}\n\nexport type UploadActivityMutationVariables = Exact<{\n  title: Scalars['String']\n  description: Scalars['String']\n  geoJson: Scalars['JSON']\n  userId: Scalars['ID']\n}>\n\nexport type UploadActivityMutation = { __typename?: 'Mutation' } & {\n  upload?: Maybe<{ __typename?: 'Activity' } & Pick<Activity, 'id'>>\n}\n\nexport type ActivitiesByUserIdQueryVariables = Exact<{\n  userId: Scalars['ID']\n}>\n\nexport type ActivitiesByUserIdQuery = { __typename?: 'Query' } & {\n  activitiesByUserId?: Maybe<\n    Array<\n      { __typename?: 'Activity' } & Pick<\n        Activity,\n        'id' | 'title' | 'geoJson' | 'createdAt'\n      > & {\n          comments: Array<\n            { __typename?: 'ActivityComment' } & Pick<\n              ActivityComment,\n              'id' | 'comment'\n            > & { user: { __typename?: 'User' } & Pick<User, 'name' | 'img'> }\n          >\n        }\n    >\n  >\n}\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<\n      User,\n      'id' | 'name' | 'email' | 'img' | 'activityCount'\n    > & {\n        latestActivity?: Maybe<\n          { __typename?: 'Activity' } & Pick<Activity, 'title' | 'createdAt'>\n        >\n      }\n  >\n}\n\nexport const AddActivityCommentDocument = gql`\n  mutation AddActivityComment(\n    $comment: String!\n    $userId: ID!\n    $activityId: ID!\n  ) {\n    addActivityComment(\n      comment: $comment\n      userId: $userId\n      activityId: $activityId\n    ) {\n      id\n    }\n  }\n`\nexport type AddActivityCommentMutationFn = ApolloReactCommon.MutationFunction<\n  AddActivityCommentMutation,\n  AddActivityCommentMutationVariables\n>\nexport type AddActivityCommentComponentProps = Omit<\n  ApolloReactComponents.MutationComponentOptions<\n    AddActivityCommentMutation,\n    AddActivityCommentMutationVariables\n  >,\n  'mutation'\n>\n\nexport const AddActivityCommentComponent = (\n  props: AddActivityCommentComponentProps\n) => (\n  <ApolloReactComponents.Mutation<\n    AddActivityCommentMutation,\n    AddActivityCommentMutationVariables\n  >\n    mutation={AddActivityCommentDocument}\n    {...props}\n  />\n)\n\nexport type AddActivityCommentProps<\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n> = {\n  [key in TDataName]: ApolloReactCommon.MutationFunction<\n    AddActivityCommentMutation,\n    AddActivityCommentMutationVariables\n  >\n} &\n  TChildProps\nexport function withAddActivityComment<\n  TProps,\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    AddActivityCommentMutation,\n    AddActivityCommentMutationVariables,\n    AddActivityCommentProps<TChildProps, TDataName>\n  >\n) {\n  return ApolloReactHoc.withMutation<\n    TProps,\n    AddActivityCommentMutation,\n    AddActivityCommentMutationVariables,\n    AddActivityCommentProps<TChildProps, TDataName>\n  >(AddActivityCommentDocument, {\n    alias: 'addActivityComment',\n    ...operationOptions,\n  })\n}\n\n/**\n * __useAddActivityCommentMutation__\n *\n * To run a mutation, you first call `useAddActivityCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddActivityCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addActivityCommentMutation, { data, loading, error }] = useAddActivityCommentMutation({\n *   variables: {\n *      comment: // value for 'comment'\n *      userId: // value for 'userId'\n *      activityId: // value for 'activityId'\n *   },\n * });\n */\nexport function useAddActivityCommentMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    AddActivityCommentMutation,\n    AddActivityCommentMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<\n    AddActivityCommentMutation,\n    AddActivityCommentMutationVariables\n  >(AddActivityCommentDocument, baseOptions)\n}\nexport type AddActivityCommentMutationHookResult = ReturnType<\n  typeof useAddActivityCommentMutation\n>\nexport type AddActivityCommentMutationResult = ApolloReactCommon.MutationResult<\n  AddActivityCommentMutation\n>\nexport type AddActivityCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  AddActivityCommentMutation,\n  AddActivityCommentMutationVariables\n>\nexport const DeleteActivityCommentDocument = gql`\n  mutation DeleteActivityComment($commentId: ID!) {\n    deleteActivityComment(commentId: $commentId) {\n      id\n    }\n  }\n`\nexport type DeleteActivityCommentMutationFn = ApolloReactCommon.MutationFunction<\n  DeleteActivityCommentMutation,\n  DeleteActivityCommentMutationVariables\n>\nexport type DeleteActivityCommentComponentProps = Omit<\n  ApolloReactComponents.MutationComponentOptions<\n    DeleteActivityCommentMutation,\n    DeleteActivityCommentMutationVariables\n  >,\n  'mutation'\n>\n\nexport const DeleteActivityCommentComponent = (\n  props: DeleteActivityCommentComponentProps\n) => (\n  <ApolloReactComponents.Mutation<\n    DeleteActivityCommentMutation,\n    DeleteActivityCommentMutationVariables\n  >\n    mutation={DeleteActivityCommentDocument}\n    {...props}\n  />\n)\n\nexport type DeleteActivityCommentProps<\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n> = {\n  [key in TDataName]: ApolloReactCommon.MutationFunction<\n    DeleteActivityCommentMutation,\n    DeleteActivityCommentMutationVariables\n  >\n} &\n  TChildProps\nexport function withDeleteActivityComment<\n  TProps,\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    DeleteActivityCommentMutation,\n    DeleteActivityCommentMutationVariables,\n    DeleteActivityCommentProps<TChildProps, TDataName>\n  >\n) {\n  return ApolloReactHoc.withMutation<\n    TProps,\n    DeleteActivityCommentMutation,\n    DeleteActivityCommentMutationVariables,\n    DeleteActivityCommentProps<TChildProps, TDataName>\n  >(DeleteActivityCommentDocument, {\n    alias: 'deleteActivityComment',\n    ...operationOptions,\n  })\n}\n\n/**\n * __useDeleteActivityCommentMutation__\n *\n * To run a mutation, you first call `useDeleteActivityCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteActivityCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteActivityCommentMutation, { data, loading, error }] = useDeleteActivityCommentMutation({\n *   variables: {\n *      commentId: // value for 'commentId'\n *   },\n * });\n */\nexport function useDeleteActivityCommentMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    DeleteActivityCommentMutation,\n    DeleteActivityCommentMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<\n    DeleteActivityCommentMutation,\n    DeleteActivityCommentMutationVariables\n  >(DeleteActivityCommentDocument, baseOptions)\n}\nexport type DeleteActivityCommentMutationHookResult = ReturnType<\n  typeof useDeleteActivityCommentMutation\n>\nexport type DeleteActivityCommentMutationResult = ApolloReactCommon.MutationResult<\n  DeleteActivityCommentMutation\n>\nexport type DeleteActivityCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  DeleteActivityCommentMutation,\n  DeleteActivityCommentMutationVariables\n>\nexport const LoginDocument = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>\nexport type LoginComponentProps = Omit<\n  ApolloReactComponents.MutationComponentOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >,\n  'mutation'\n>\n\nexport const LoginComponent = (props: LoginComponentProps) => (\n  <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables>\n    mutation={LoginDocument}\n    {...props}\n  />\n)\n\nexport type LoginProps<\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n> = {\n  [key in TDataName]: ApolloReactCommon.MutationFunction<\n    LoginMutation,\n    LoginMutationVariables\n  >\n} &\n  TChildProps\nexport function withLogin<\n  TProps,\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    LoginMutation,\n    LoginMutationVariables,\n    LoginProps<TChildProps, TDataName>\n  >\n) {\n  return ApolloReactHoc.withMutation<\n    TProps,\n    LoginMutation,\n    LoginMutationVariables,\n    LoginProps<TChildProps, TDataName>\n  >(LoginDocument, {\n    alias: 'login',\n    ...operationOptions,\n  })\n}\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions\n  )\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<\n  LoginMutation\n>\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>\nexport const SignUpDocument = gql`\n  mutation signUp(\n    $email: String!\n    $firstName: String!\n    $lastName: String!\n    $password: String!\n    $passwordConfirmation: String!\n  ) {\n    signUp(\n      attributes: {\n        email: $email\n        firstName: $firstName\n        lastName: $lastName\n        password: $password\n        passwordConfirmation: $passwordConfirmation\n      }\n    ) {\n      token\n    }\n  }\n`\nexport type SignUpMutationFn = ApolloReactCommon.MutationFunction<\n  SignUpMutation,\n  SignUpMutationVariables\n>\nexport type SignUpComponentProps = Omit<\n  ApolloReactComponents.MutationComponentOptions<\n    SignUpMutation,\n    SignUpMutationVariables\n  >,\n  'mutation'\n>\n\nexport const SignUpComponent = (props: SignUpComponentProps) => (\n  <ApolloReactComponents.Mutation<SignUpMutation, SignUpMutationVariables>\n    mutation={SignUpDocument}\n    {...props}\n  />\n)\n\nexport type SignUpProps<\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n> = {\n  [key in TDataName]: ApolloReactCommon.MutationFunction<\n    SignUpMutation,\n    SignUpMutationVariables\n  >\n} &\n  TChildProps\nexport function withSignUp<\n  TProps,\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    SignUpMutation,\n    SignUpMutationVariables,\n    SignUpProps<TChildProps, TDataName>\n  >\n) {\n  return ApolloReactHoc.withMutation<\n    TProps,\n    SignUpMutation,\n    SignUpMutationVariables,\n    SignUpProps<TChildProps, TDataName>\n  >(SignUpDocument, {\n    alias: 'signUp',\n    ...operationOptions,\n  })\n}\n\n/**\n * __useSignUpMutation__\n *\n * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signUpMutation, { data, loading, error }] = useSignUpMutation({\n *   variables: {\n *      email: // value for 'email'\n *      firstName: // value for 'firstName'\n *      lastName: // value for 'lastName'\n *      password: // value for 'password'\n *      passwordConfirmation: // value for 'passwordConfirmation'\n *   },\n * });\n */\nexport function useSignUpMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    SignUpMutation,\n    SignUpMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<SignUpMutation, SignUpMutationVariables>(\n    SignUpDocument,\n    baseOptions\n  )\n}\nexport type SignUpMutationHookResult = ReturnType<typeof useSignUpMutation>\nexport type SignUpMutationResult = ApolloReactCommon.MutationResult<\n  SignUpMutation\n>\nexport type SignUpMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  SignUpMutation,\n  SignUpMutationVariables\n>\nexport const UploadActivityDocument = gql`\n  mutation uploadActivity(\n    $title: String!\n    $description: String!\n    $geoJson: JSON!\n    $userId: ID!\n  ) {\n    upload(\n      title: $title\n      description: $description\n      geoJson: $geoJson\n      userId: $userId\n    ) {\n      id\n    }\n  }\n`\nexport type UploadActivityMutationFn = ApolloReactCommon.MutationFunction<\n  UploadActivityMutation,\n  UploadActivityMutationVariables\n>\nexport type UploadActivityComponentProps = Omit<\n  ApolloReactComponents.MutationComponentOptions<\n    UploadActivityMutation,\n    UploadActivityMutationVariables\n  >,\n  'mutation'\n>\n\nexport const UploadActivityComponent = (\n  props: UploadActivityComponentProps\n) => (\n  <ApolloReactComponents.Mutation<\n    UploadActivityMutation,\n    UploadActivityMutationVariables\n  >\n    mutation={UploadActivityDocument}\n    {...props}\n  />\n)\n\nexport type UploadActivityProps<\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n> = {\n  [key in TDataName]: ApolloReactCommon.MutationFunction<\n    UploadActivityMutation,\n    UploadActivityMutationVariables\n  >\n} &\n  TChildProps\nexport function withUploadActivity<\n  TProps,\n  TChildProps = {},\n  TDataName extends string = 'mutate'\n>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    UploadActivityMutation,\n    UploadActivityMutationVariables,\n    UploadActivityProps<TChildProps, TDataName>\n  >\n) {\n  return ApolloReactHoc.withMutation<\n    TProps,\n    UploadActivityMutation,\n    UploadActivityMutationVariables,\n    UploadActivityProps<TChildProps, TDataName>\n  >(UploadActivityDocument, {\n    alias: 'uploadActivity',\n    ...operationOptions,\n  })\n}\n\n/**\n * __useUploadActivityMutation__\n *\n * To run a mutation, you first call `useUploadActivityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadActivityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadActivityMutation, { data, loading, error }] = useUploadActivityMutation({\n *   variables: {\n *      title: // value for 'title'\n *      description: // value for 'description'\n *      geoJson: // value for 'geoJson'\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useUploadActivityMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    UploadActivityMutation,\n    UploadActivityMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<\n    UploadActivityMutation,\n    UploadActivityMutationVariables\n  >(UploadActivityDocument, baseOptions)\n}\nexport type UploadActivityMutationHookResult = ReturnType<\n  typeof useUploadActivityMutation\n>\nexport type UploadActivityMutationResult = ApolloReactCommon.MutationResult<\n  UploadActivityMutation\n>\nexport type UploadActivityMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  UploadActivityMutation,\n  UploadActivityMutationVariables\n>\nexport const ActivitiesByUserIdDocument = gql`\n  query activitiesByUserId($userId: ID!) {\n    activitiesByUserId(userId: $userId) {\n      id\n      title\n      geoJson\n      createdAt\n      comments {\n        id\n        comment\n        user {\n          name\n          img\n        }\n      }\n    }\n  }\n`\nexport type ActivitiesByUserIdComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables\n  >,\n  'query'\n> &\n  (\n    | { variables: ActivitiesByUserIdQueryVariables; skip?: boolean }\n    | { skip: boolean }\n  )\n\nexport const ActivitiesByUserIdComponent = (\n  props: ActivitiesByUserIdComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables\n  >\n    query={ActivitiesByUserIdDocument}\n    {...props}\n  />\n)\n\nexport type ActivitiesByUserIdProps<\n  TChildProps = {},\n  TDataName extends string = 'data'\n> = {\n  [key in TDataName]: ApolloReactHoc.DataValue<\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables\n  >\n} &\n  TChildProps\nexport function withActivitiesByUserId<\n  TProps,\n  TChildProps = {},\n  TDataName extends string = 'data'\n>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables,\n    ActivitiesByUserIdProps<TChildProps, TDataName>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables,\n    ActivitiesByUserIdProps<TChildProps, TDataName>\n  >(ActivitiesByUserIdDocument, {\n    alias: 'activitiesByUserId',\n    ...operationOptions,\n  })\n}\n\n/**\n * __useActivitiesByUserIdQuery__\n *\n * To run a query within a React component, call `useActivitiesByUserIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useActivitiesByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useActivitiesByUserIdQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useActivitiesByUserIdQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables\n  >(ActivitiesByUserIdDocument, baseOptions)\n}\nexport function useActivitiesByUserIdLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables\n  >\n) {\n  return ApolloReactHooks.useLazyQuery<\n    ActivitiesByUserIdQuery,\n    ActivitiesByUserIdQueryVariables\n  >(ActivitiesByUserIdDocument, baseOptions)\n}\nexport type ActivitiesByUserIdQueryHookResult = ReturnType<\n  typeof useActivitiesByUserIdQuery\n>\nexport type ActivitiesByUserIdLazyQueryHookResult = ReturnType<\n  typeof useActivitiesByUserIdLazyQuery\n>\nexport type ActivitiesByUserIdQueryResult = ApolloReactCommon.QueryResult<\n  ActivitiesByUserIdQuery,\n  ActivitiesByUserIdQueryVariables\n>\nexport const MeDocument = gql`\n  query me {\n    me {\n      id\n      name\n      email\n      img\n      latestActivity {\n        title\n        createdAt\n      }\n      activityCount\n    }\n  }\n`\nexport type MeComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<MeQuery, MeQueryVariables>,\n  'query'\n>\n\nexport const MeComponent = (props: MeComponentProps) => (\n  <ApolloReactComponents.Query<MeQuery, MeQueryVariables>\n    query={MeDocument}\n    {...props}\n  />\n)\n\nexport type MeProps<TChildProps = {}, TDataName extends string = 'data'> = {\n  [key in TDataName]: ApolloReactHoc.DataValue<MeQuery, MeQueryVariables>\n} &\n  TChildProps\nexport function withMe<\n  TProps,\n  TChildProps = {},\n  TDataName extends string = 'data'\n>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    MeQuery,\n    MeQueryVariables,\n    MeProps<TChildProps, TDataName>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    MeQuery,\n    MeQueryVariables,\n    MeProps<TChildProps, TDataName>\n  >(MeDocument, {\n    alias: 'me',\n    ...operationOptions,\n  })\n}\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(\n    MeDocument,\n    baseOptions\n  )\n}\nexport function useMeLazyQuery(\n  baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(\n    MeDocument,\n    baseOptions\n  )\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>\nexport type MeQueryResult = ApolloReactCommon.QueryResult<\n  MeQuery,\n  MeQueryVariables\n>\n"]},"metadata":{},"sourceType":"module"}