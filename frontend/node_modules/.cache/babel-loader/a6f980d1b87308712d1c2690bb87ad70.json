{"ast":null,"code":"var _jsxFileName = \"/home/ethan/avarts/frontend/src/App.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport Helmet from 'react-helmet';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport SignUp from './components/SignUp';\nimport { useMeQuery } from './generated/graphql';\nimport UserContext from './userContext'; // import { toggleSidebar } from './utils/sideBar'\n\nrequire('halfmoon/css/halfmoon.min.css');\n\nconst halfmoon = require('halfmoon');\n\nconst App = () => {\n  const [user, setUser] = useState();\n  const {\n    data,\n    error,\n    loading\n  } = useMeQuery();\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    window.location.reload();\n  };\n\n  useEffect(() => {\n    if (data) {\n      if (data && data.me) {\n        console.log(data.me);\n        setUser(data.me);\n      }\n    }\n\n    if (error) {\n      console.log(error);\n    }\n\n    if (loading) {\n      console.log(loading);\n    }\n  }, [data, error, loading]);\n  useEffect(() => {\n    document.body.classList.add('with-custom-webkit-scrollbars');\n    document.body.classList.add('with-custom-css-scrollbars');\n    const darkModePref = localStorage.getItem('prefer-dark-mode');\n\n    if (darkModePref === 'true') {\n      halfmoon.toggleDarkMode();\n    }\n\n    halfmoon.onDOMContentLoaded();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"pageWrapper\",\n    className: \"page-wrapper with-navbar\" //with-sidebar\n    // data-sidebar-type=\"overlayed-all\"\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"meta\", {\n    charSet: \"utf-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Avarts\")), /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), user ? /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user: {\n        id: user.id,\n        name: user.name,\n        img: user.img,\n        // TODO: This is ugly. Find a better way to handle when a User has no activities\n        latestActivity: user.latestActivity && user.latestActivity.title ? user.latestActivity : {\n          title: '',\n          createdAt: ''\n        },\n        activityCount: user.activityCount\n      },\n      logout: logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(SignUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/ethan/avarts/frontend/src/App.tsx"],"names":["React","useEffect","useState","Helmet","Header","Main","SignUp","useMeQuery","UserContext","require","halfmoon","App","user","setUser","data","error","loading","logout","localStorage","removeItem","window","location","reload","me","console","log","document","body","classList","add","darkModePref","getItem","toggleDarkMode","onDOMContentLoaded","id","name","img","latestActivity","title","createdAt","activityCount"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Helmet from 'react-helmet'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport SignUp from './components/SignUp'\nimport { useMeQuery } from './generated/graphql'\nimport UserContext from './userContext'\n// import { toggleSidebar } from './utils/sideBar'\n\nrequire('halfmoon/css/halfmoon.min.css')\n\nconst halfmoon = require('halfmoon')\n\nconst App: React.FC = () => {\n  const [user, setUser] = useState<any>()\n  const { data, error, loading } = useMeQuery()\n\n  const logout = () => {\n    localStorage.removeItem('token')\n    window.location.reload()\n  }\n\n  useEffect(() => {\n    if (data) {\n      if (data && data.me) {\n        console.log(data.me)\n        setUser(data.me)\n      }\n    }\n    if (error) {\n      console.log(error)\n    }\n    if (loading) {\n      console.log(loading)\n    }\n  }, [data, error, loading])\n\n  useEffect(() => {\n    document.body.classList.add('with-custom-webkit-scrollbars')\n    document.body.classList.add('with-custom-css-scrollbars')\n\n    const darkModePref = localStorage.getItem('prefer-dark-mode')\n\n    if (darkModePref === 'true') {\n      halfmoon.toggleDarkMode()\n    }\n\n    halfmoon.onDOMContentLoaded()\n  }, [])\n\n  return (\n    <div\n      id=\"pageWrapper\"\n      className=\"page-wrapper with-navbar\" //with-sidebar\n      // data-sidebar-type=\"overlayed-all\"\n    >\n      {/* <div className=\"sidebar-overlay\" onClick={toggleSidebar}></div>\n      <div className=\"sidebar border-0\">\n        <UserCard />\n      </div> */}\n\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Avarts</title>\n      </Helmet>\n\n      <Header />\n      {user ? (\n        <UserContext.Provider\n          value={{\n            user: {\n              id: user.id,\n              name: user.name,\n              img: user.img,\n              // TODO: This is ugly. Find a better way to handle when a User has no activities\n              latestActivity:\n                user.latestActivity && user.latestActivity.title\n                  ? user.latestActivity\n                  : { title: '', createdAt: '' },\n              activityCount: user.activityCount,\n            },\n            logout: logout,\n          }}\n        >\n          <Main />\n        </UserContext.Provider>\n      ) : (\n        <SignUp />\n      )}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}