{"ast":null,"code":"import { isReference, isField, DeepMerger } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nvar FieldNamePattern = /^[_A-Za-z0-9]+/;\nexport function fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(FieldNamePattern);\n  return match ? match[0] : storeFieldName;\n}\nexport function storeValueIsStoreObject(value) {\n  return value !== null && typeof value === \"object\" && !isReference(value) && !Array.isArray(value);\n}\nexport function isFieldValueToBeMerged(value) {\n  var field = value && value.__field;\n  return field && isField(field);\n}\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger(reconcileProcessedFields);\n}\n\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\n  var existing = existingObject[property];\n  var incoming = incomingObject[property];\n\n  if (isFieldValueToBeMerged(existing)) {\n    existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming) ? incoming.__value : incoming);\n    return existing;\n  }\n\n  if (isFieldValueToBeMerged(incoming)) {\n    incoming.__value = this.merge(existing, incoming.__value);\n    return incoming;\n  }\n\n  return this.merge(existing, incoming);\n};","map":{"version":3,"sources":["../../../src/cache/inmemory/helpers.ts"],"names":[],"mappings":"AAGA,SAEE,WAFF,EAKE,OALF,EAME,UANF,QAQO,0BARP;AAUA,OAAO,IAAM,MAAM,GAAG,MAAM,CAAC,SAAP,CAAiB,cAAhC;AAEP,OAAM,SAAU,0BAAV,CACJ,KADI,EAEJ,iBAFI,EAEsC;AAE1C,SAAO,WAAW,CAAC,iBAAD,CAAX,GACH,KAAK,CAAC,GAAN,CAAU,iBAAiB,CAAC,KAA5B,EAAmC,YAAnC,CADG,GAEH,iBAAiB,IAAI,iBAAiB,CAAC,UAF3C;AAGD;AAED,IAAM,gBAAgB,GAAG,gBAAzB;AACA,OAAM,SAAU,sBAAV,CAAiC,cAAjC,EAAuD;AAC3D,MAAM,KAAK,GAAG,cAAc,CAAC,KAAf,CAAqB,gBAArB,CAAd;AACA,SAAO,KAAK,GAAG,KAAK,CAAC,CAAD,CAAR,GAAc,cAA1B;AACD;AAaD,OAAM,SAAU,uBAAV,CACJ,KADI,EACa;AAEjB,SAAO,KAAK,KAAK,IAAV,IACL,OAAO,KAAP,KAAiB,QADZ,IAEL,CAAC,WAAW,CAAC,KAAD,CAFP,IAGL,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAHH;AAID;AAED,OAAM,SAAU,sBAAV,CACJ,KADI,EACM;AAEV,MAAM,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,OAA7B;AACA,SAAO,KAAK,IAAI,OAAO,CAAC,KAAD,CAAvB;AACD;AAED,OAAM,SAAU,yBAAV,GAAmC;AAKvC,SAAO,IAAI,UAAJ,CAAe,wBAAf,CAAP;AACD;;AAED,IAAM,wBAAwB,GAA2B,UACvD,cADuD,EAEvD,cAFuD,EAGvD,QAHuD,EAG/C;AAER,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAD,CAA/B;AACA,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAD,CAA/B;;AAEA,MAAI,sBAAsB,CAAC,QAAD,CAA1B,EAAsC;AACpC,IAAA,QAAQ,CAAC,OAAT,GAAmB,KAAK,KAAL,CACjB,QAAQ,CAAC,OADQ,EAEjB,sBAAsB,CAAC,QAAD,CAAtB,GAEI,QAAQ,CAAC,OAFb,GAGI,QALa,CAAnB;AAOA,WAAO,QAAP;AACD;;AAED,MAAI,sBAAsB,CAAC,QAAD,CAA1B,EAAsC;AACpC,IAAA,QAAQ,CAAC,OAAT,GAAmB,KAAK,KAAL,CACjB,QADiB,EAEjB,QAAQ,CAAC,OAFQ,CAAnB;AAIA,WAAO,QAAP;AACD;;AAED,SAAO,KAAK,KAAL,CAAW,QAAX,EAAqB,QAArB,CAAP;AACD,CA5BD","sourceRoot":"","sourcesContent":["import { isReference, isField, DeepMerger, } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n    return isReference(objectOrReference)\n        ? store.get(objectOrReference.__ref, \"__typename\")\n        : objectOrReference && objectOrReference.__typename;\n}\nvar FieldNamePattern = /^[_A-Za-z0-9]+/;\nexport function fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(FieldNamePattern);\n    return match ? match[0] : storeFieldName;\n}\nexport function storeValueIsStoreObject(value) {\n    return value !== null &&\n        typeof value === \"object\" &&\n        !isReference(value) &&\n        !Array.isArray(value);\n}\nexport function isFieldValueToBeMerged(value) {\n    var field = value && value.__field;\n    return field && isField(field);\n}\nexport function makeProcessedFieldsMerger() {\n    return new DeepMerger(reconcileProcessedFields);\n}\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\n    var existing = existingObject[property];\n    var incoming = incomingObject[property];\n    if (isFieldValueToBeMerged(existing)) {\n        existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming)\n            ? incoming.__value\n            : incoming);\n        return existing;\n    }\n    if (isFieldValueToBeMerged(incoming)) {\n        incoming.__value = this.merge(existing, incoming.__value);\n        return incoming;\n    }\n    return this.merge(existing, incoming);\n};\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"module"}