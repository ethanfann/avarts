{"version":3,"file":"index.ie11.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  SubmitErrorHandler,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnTouch },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          !deepEqual(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          !name ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n            isTouched: !!get(touchedFieldsRef.current, name),\n            ...modeRef.current,\n          });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport deepEqual from './logic/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop.');\n    }\n\n    if (!name) {\n      console.warn('📋 useFieldArray is missing `name` attribute.');\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValues.current, name) ||\n      get(defaultValuesRef.current, name) ||\n      []),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const rootParentName = getFieldArrayParentName(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValues.current, name) && rootParentName) {\n    set(\n      fieldArrayDefaultValues.current,\n      rootParentName,\n      get(defaultValuesRef.current, rootParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    renderWatchedInputs(name);\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.isValid) &&\n      !isWatchAllRef.current\n    ) {\n      shouldRender = true;\n    }\n\n    shouldRender && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        !deepEqual(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFieldsRef.current, name, [\n        ...(get(dirtyFieldsRef.current, name) ||\n          fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ]);\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        prependAt(get(errorsRef.current, name), emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        prependAt(get(touchedFieldsRef.current, name), emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        prependAt(\n          get(dirtyFieldsRef.current, name) || [],\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        removeArrayAt(get(touchedFieldsRef.current, name), index),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        removeArrayAt(get(dirtyFieldsRef.current, name), index),\n      );\n\n      if (!unique(get(dirtyFieldsRef.current, name, [])).length) {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateResolver) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const getFieldName = (index = 0) =>\n            `${name}[${fieldIndex - index}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(getFieldName());\n            fieldsWithValidationRef.current.delete(getFieldName());\n          } else {\n            if (validFieldsRef.current.has(getFieldName())) {\n              validFieldsRef.current.add(getFieldName(1));\n            }\n            if (fieldsWithValidationRef.current.has(getFieldName())) {\n              fieldsWithValidationRef.current.add(getFieldName(1));\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        insertAt(get(errorsRef.current, name), index, emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        insertAt(get(touchedFieldsRef.current, name), index, emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        insertAt(\n          get(dirtyFieldsRef.current, name),\n          index,\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(touchedFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(dirtyFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(touchedFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(dirtyFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNamesRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error('📋 Controller is missing `control` prop.');\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing.',\n      );\n    }\n\n    if (as && render) {\n      console.warn('📋 Should use either `as` or `render` prop.');\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`.',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted: isSubmittedRef.current,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn('📋 Field is missing `name` prop.');\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop.');\n    }\n\n    if (name === '') {\n      console.warn('📋 useWatch is missing `name` attribute.');\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(\n    () => setValue(watchInternal(name, defaultValueRef.current, idRef.current)),\n    [setValue, watchInternal, defaultValueRef, name, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","_Array$isArray","isObjectType","isNullOrUndefined","isArray","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","_reduceInstanceProperty","previous","_a","_c","__read","val","undefined","_filterInstanceProperty","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","SELECT","defaultResult","validResult","values","_mapInstanceProperty","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","__spread","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","_Object$keys","unset","updatePath","childObject","_sliceInstanceProperty","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","name_1","isString","_startsWithInstanceProperty","_findInstanceProperty","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","_b","types","message","_everyInstanceProperty","RegExp","validationData","isRegex","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","_bindInstanceProperty","appendErrors","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","exceedMin","_d","maxValue","maxMessage","_e","minValue","minMessage","valueNumber","valueAsNumber","_parseFloat","valueDate","valueAsDate","_f","maxLengthValue","_g","minLengthValue","inputLength","toString","_h","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","_o","validateError","validationResult","_j","__values","_Object$entries","_l","validateFunction","validateResult","getPath","_flatInstanceProperty","pathWithIndex","isPrimitive","getInnerPath","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","substring","_indexOfInstanceProperty","deepEqual","object1","object2","keys1","keys2","keys1_1","val1","val2","isMatchFieldArrayName","searchName","names","_someInstanceProperty","mode","isOnSubmit","isOnAll","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","_Date$now","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","_spliceInstanceProperty","indexA","indexB","temp","prepend","insert","_fillInstanceProperty","Array","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","React.useState","setInputStateValue","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","_Object$defineProperty","focus","React.useEffect","onBlur","touched","onChange","_i","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","__assign","shouldRender","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateResolver","renderWatchedInputs","getValues","getDefaultValues","memoizedDefaultValues","setFields","allFields","rootParentName","getFieldArrayParentName","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","reset","defaultValues","pop","shouldRenderUseWatch","watchField","resetFunctions","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex_1","isFound","isIndexUndefined","isLast","isCurrentIndex","getFieldName","has","insertAt","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","_k","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","selected","_includesInstanceProperty","_forEachInstanceProperty","checkboxRef","String","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","_Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","mutationWatcher","fieldRef","options_1","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","_Object$values","fieldError","focusOnErrorField","formState","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}