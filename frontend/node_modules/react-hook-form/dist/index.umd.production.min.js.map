{"version":3,"file":"index.umd.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/unique.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/isPrimitive.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/utils/onDomRemove.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  SubmitErrorHandler,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnTouch },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          !deepEqual(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          !name ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n            isTouched: !!get(touchedFieldsRef.current, name),\n            ...modeRef.current,\n          });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport unique from './unique';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return unique(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(data: T[], from: number, to: number): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined as any;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean(value: any) {\n  if (isObject(value)) {\n    const object: any = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport const filterBooleanArray = <T>(value: T): T[] =>\n  isArray(value)\n    ? value.map(mapValueToBoolean).flat()\n    : mapValueToBoolean(value);\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport isObject from './utils/isObject';\nimport deepEqual from './logic/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport { filterBooleanArray } from './utils/filterBooleanArray';\nimport unique from './utils/unique';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n} from './types/form';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...(isObject(value) ? value : { value }),\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop.');\n    }\n\n    if (!name) {\n      console.warn('📋 useFieldArray is missing `name` attribute.');\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    reRender,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    errorsRef,\n    dirtyFieldsRef,\n    isDirtyRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValues,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n  let shouldRender;\n\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValues.current, name) ||\n      get(defaultValuesRef.current, name) ||\n      []),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n  const rootParentName = getFieldArrayParentName(name);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValues.current, name) && rootParentName) {\n    set(\n      fieldArrayDefaultValues.current,\n      rootParentName,\n      get(defaultValuesRef.current, rootParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const shouldRenderFieldArray = (shouldRender?: boolean) => {\n    renderWatchedInputs(name);\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.isValid) &&\n      !isWatchAllRef.current\n    ) {\n      shouldRender = true;\n    }\n\n    shouldRender && reRender();\n  };\n\n  const resetFields = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ) => {\n    if (\n      readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields\n    ) {\n      isDirtyRef.current =\n        isUndefined(flagOrFields) ||\n        !deepEqual(\n          flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n          get(defaultValuesRef.current, name, []),\n        );\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFieldsRef.current, name, [\n        ...(get(dirtyFieldsRef.current, name) ||\n          fillEmptyArray(fields.slice(0, 1))),\n        ...filterBooleanArray(value),\n      ]);\n      isDirtyRef.current = true;\n      shouldRender = true;\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    shouldRender = false;\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        prependAt(get(errorsRef.current, name), emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        prependAt(get(touchedFieldsRef.current, name), emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        prependAt(\n          get(dirtyFieldsRef.current, name) || [],\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields(removeArrayAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        removeArrayAt(get(errorsRef.current, name), index),\n      );\n\n      if (!unique(get(errorsRef.current, name, [])).length) {\n        unset(errorsRef.current, name);\n      }\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        removeArrayAt(get(touchedFieldsRef.current, name), index),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        removeArrayAt(get(dirtyFieldsRef.current, name), index),\n      );\n\n      if (!unique(get(dirtyFieldsRef.current, name, [])).length) {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      shouldRender = true;\n    }\n\n    if (readFormStateRef.current.isValid && !validateResolver) {\n      let fieldIndex = -1;\n      let isFound = false;\n      const isIndexUndefined = isUndefined(index);\n\n      while (fieldIndex++ < fields.length) {\n        const isLast = fieldIndex === fields.length - 1;\n        const isCurrentIndex =\n          (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\n\n        if (isCurrentIndex || isIndexUndefined) {\n          isFound = true;\n        }\n\n        if (!isFound) {\n          continue;\n        }\n\n        for (const key in fields[fieldIndex]) {\n          const getFieldName = (index = 0) =>\n            `${name}[${fieldIndex - index}].${key}`;\n\n          if (isCurrentIndex || isLast || isIndexUndefined) {\n            validFieldsRef.current.delete(getFieldName());\n            fieldsWithValidationRef.current.delete(getFieldName());\n          } else {\n            if (validFieldsRef.current.has(getFieldName())) {\n              validFieldsRef.current.add(getFieldName(1));\n            }\n            if (fieldsWithValidationRef.current.has(getFieldName())) {\n              fieldsWithValidationRef.current.add(getFieldName(1));\n            }\n          }\n        }\n      }\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    shouldRender = false;\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields(insertAt(fieldValues, index));\n\n    if (isArray(get(errorsRef.current, name))) {\n      set(\n        errorsRef.current,\n        name,\n        insertAt(get(errorsRef.current, name), index, emptyArray),\n      );\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      set(\n        touchedFieldsRef.current,\n        name,\n        insertAt(get(touchedFieldsRef.current, name), index, emptyArray),\n      );\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      set(\n        dirtyFieldsRef.current,\n        name,\n        insertAt(\n          get(dirtyFieldsRef.current, name),\n          index,\n          filterBooleanArray(value),\n        ),\n      );\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    shouldRender = false;\n\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      swapArrayAt(get(errorsRef.current, name), indexA, indexB);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(touchedFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      swapArrayAt(get(dirtyFieldsRef.current, name), indexA, indexB);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const move = (from: number, to: number) => {\n    shouldRender = false;\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    setFieldAndValidState([...fieldValues]);\n\n    if (isArray(get(errorsRef.current, name))) {\n      moveArrayAt(get(errorsRef.current, name), from, to);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(touchedFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(touchedFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    if (\n      (readFormStateRef.current.dirtyFields ||\n        readFormStateRef.current.isDirty) &&\n      get(dirtyFieldsRef.current, name)\n    ) {\n      moveArrayAt(get(dirtyFieldsRef.current, name), from, to);\n      shouldRender = true;\n    }\n\n    shouldRenderFieldArray(shouldRender);\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = getDefaultValues();\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValues.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValues.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      reRender();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          reRender();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [\n    fields,\n    name,\n    fieldArrayDefaultValues,\n    reRender,\n    fieldsRef,\n    watchFieldsRef,\n    isWatchAllRef,\n  ]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    resetFunctions[name] = reset;\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNamesRef.current.delete(name);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [fields, name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types/form';\nimport { ControllerProps } from './types/props';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error('📋 Controller is missing `control` prop.');\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    isSubmittedRef,\n    touchedFieldsRef,\n    readFormStateRef,\n    reRender,\n    fieldsRef,\n    fieldArrayNamesRef,\n    unmountFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(unmountFieldsStateRef.current, name)) && isNotFieldArray\n      ? unmountFieldsStateRef.current[name]\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        '📋 Controller `defaultValue` or useForm `defaultValues` is missing.',\n      );\n    }\n\n    if (as && render) {\n      console.warn('📋 Should use either `as` or `render` prop.');\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`.',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted: isSubmittedRef.current,\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn('📋 Field is missing `name` prop.');\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [fieldsRef, rules, name, onFocusRef, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (\n      readFormStateRef.current.touched &&\n      !get(touchedFieldsRef.current, name)\n    ) {\n      set(touchedFieldsRef.current, name, true);\n      reRender();\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport {\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types/form';\nimport { DeepPartial } from './types/utils';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop.');\n    }\n\n    if (name === '') {\n      console.warn('📋 useWatch is missing `name` attribute.');\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(\n    () => setValue(watchInternal(name, defaultValueRef.current, idRef.current)),\n    [setValue, watchInternal, defaultValueRef, name, idRef],\n  );\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","unique","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","field","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","isString","startsWith","find","deepMerge","target","source","targetValue","sourceValue","transformToNestObject","error","types","message","every","RegExp","validationData","isValueMessage","isRegex","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","get","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","filterBooleanArray","appendId","keyName","generateId","mapIds","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","isSubmittedRef","touchedFieldsRef","readFormStateRef","reRender","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","touched","onChange","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","errorsRef","dirtyFieldsRef","isDirtyRef","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValues","validateResolver","renderWatchedInputs","getValues","shouldRender","getDefaultValues","memoizedDefaultValues","setFields","allFields","rootParentName","getFieldArrayParentName","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","shouldRenderFieldArray","dirtyFields","isDirty","resetFields","flagOrFields","_b","reset","defaultValues","pop","shouldRenderUseWatch","watchField","resetFunctions","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","append","remove","removeArrayAt","fieldIndex","isFound","isIndexUndefined","isLast","isCurrentIndex","getFieldName","has","insertAt","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","isValidRef","defaultValuesAtRenderRef","isUnMount","submitCountRef","isSubmittingRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","submitCount","isSubmitting","shouldRenderBaseOnError","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","String","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","mutationWatcher","fieldRef","removeAllEventListeners","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","onDomRemove","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","formState","commonProps","refOrValidationOptions","prop","watch","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}