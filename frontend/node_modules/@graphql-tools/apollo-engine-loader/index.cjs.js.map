{"version":3,"file":"index.cjs.js","sources":["../../../dist/loaders/apollo-engine/src/index.js"],"sourcesContent":["import { fetch } from 'cross-fetch';\nimport { buildClientSchema } from 'graphql';\nconst DEFAULT_APOLLO_ENDPOINT = 'https://engine-graphql.apollographql.com/api/graphql';\n/**\n * This loader loads a schema from Apollo Engine\n */\nexport class ApolloEngineLoader {\n    loaderId() {\n        return 'apollo-engine';\n    }\n    async canLoad(ptr) {\n        return typeof ptr === 'string' && ptr === 'apollo-engine';\n    }\n    canLoadSync() {\n        return false;\n    }\n    async load(_, options) {\n        const response = await fetch(options.engine.endpoint || DEFAULT_APOLLO_ENDPOINT, {\n            method: 'POST',\n            headers: {\n                'x-api-key': options.engine.apiKey,\n                'apollo-client-name': 'Apollo Language Server',\n                'apollo-client-reference-id': '146d29c0-912c-46d3-b686-920e52586be6',\n                'apollo-client-version': '2.6.8',\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                ...options.headers,\n            },\n            body: JSON.stringify({\n                query: SCHEMA_QUERY,\n                variables: {\n                    id: options.graph,\n                    tag: options.variant,\n                },\n            }),\n        });\n        const { data, errors } = await response.json();\n        if (errors) {\n            throw new Error(errors.map(({ message }) => message).join('\\n'));\n        }\n        return {\n            location: 'apollo-engine',\n            schema: buildClientSchema(data.service.schema),\n        };\n    }\n    loadSync() {\n        throw new Error('Loader ApolloEngine has no sync mode');\n    }\n}\n/**\n * @internal\n */\nexport const SCHEMA_QUERY = /* GraphQL */ `\n  query GetSchemaByTag($tag: String!, $id: ID!) {\n    service(id: $id) {\n      ... on Service {\n        __typename\n        schema(tag: $tag) {\n          hash\n          __schema: introspection {\n            queryType {\n              name\n            }\n            mutationType {\n              name\n            }\n            subscriptionType {\n              name\n            }\n            types(filter: { includeBuiltInTypes: true }) {\n              ...IntrospectionFullType\n            }\n            directives {\n              name\n              description\n              locations\n              args {\n                ...IntrospectionInputValue\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment IntrospectionFullType on IntrospectionType {\n    kind\n    name\n    description\n    fields {\n      name\n      description\n      args {\n        ...IntrospectionInputValue\n      }\n      type {\n        ...IntrospectionTypeRef\n      }\n      isDeprecated\n      deprecationReason\n    }\n    inputFields {\n      ...IntrospectionInputValue\n    }\n    interfaces {\n      ...IntrospectionTypeRef\n    }\n    enumValues(includeDeprecated: true) {\n      name\n      description\n      isDeprecated\n      deprecationReason\n    }\n    possibleTypes {\n      ...IntrospectionTypeRef\n    }\n  }\n\n  fragment IntrospectionInputValue on IntrospectionInputValue {\n    name\n    description\n    type {\n      ...IntrospectionTypeRef\n    }\n    defaultValue\n  }\n\n  fragment IntrospectionTypeRef on IntrospectionType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n//# sourceMappingURL=index.js.map"],"names":["fetch","buildClientSchema"],"mappings":";;;;;;;AAEA,MAAM,uBAAuB,GAAG,sDAAsD,CAAC;AACvF;AACA;AACA;AACO,MAAM,kBAAkB,CAAC;AAChC,IAAI,QAAQ,GAAG;AACf,QAAQ,OAAO,eAAe,CAAC;AAC/B,KAAK;AACL,IAAI,MAAM,OAAO,CAAC,GAAG,EAAE;AACvB,QAAQ,OAAO,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,eAAe,CAAC;AAClE,KAAK;AACL,IAAI,WAAW,GAAG;AAClB,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,IAAI,MAAM,IAAI,CAAC,CAAC,EAAE,OAAO,EAAE;AAC3B,QAAQ,MAAM,QAAQ,GAAG,MAAMA,gBAAK,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,IAAI,uBAAuB,EAAE;AACzF,YAAY,MAAM,EAAE,MAAM;AAC1B,YAAY,OAAO,EAAE;AACrB,gBAAgB,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,MAAM;AAClD,gBAAgB,oBAAoB,EAAE,wBAAwB;AAC9D,gBAAgB,4BAA4B,EAAE,sCAAsC;AACpF,gBAAgB,uBAAuB,EAAE,OAAO;AAChD,gBAAgB,cAAc,EAAE,kBAAkB;AAClD,gBAAgB,MAAM,EAAE,kBAAkB;AAC1C,gBAAgB,GAAG,OAAO,CAAC,OAAO;AAClC,aAAa;AACb,YAAY,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;AACjC,gBAAgB,KAAK,EAAE,YAAY;AACnC,gBAAgB,SAAS,EAAE;AAC3B,oBAAoB,EAAE,EAAE,OAAO,CAAC,KAAK;AACrC,oBAAoB,GAAG,EAAE,OAAO,CAAC,OAAO;AACxC,iBAAiB;AACjB,aAAa,CAAC;AACd,SAAS,CAAC,CAAC;AACX,QAAQ,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;AACvD,QAAQ,IAAI,MAAM,EAAE;AACpB,YAAY,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7E,SAAS;AACT,QAAQ,OAAO;AACf,YAAY,QAAQ,EAAE,eAAe;AACrC,YAAY,MAAM,EAAEC,yBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAC1D,SAAS,CAAC;AACV,KAAK;AACL,IAAI,QAAQ,GAAG;AACf,QAAQ,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAChE,KAAK;AACL,CAAC;AACD;AACA;AACA;AACY,MAAC,YAAY,iBAAi}