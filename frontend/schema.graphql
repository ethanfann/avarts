type Activity {
  activityComment: [ActivityComment!]!
  avgCadence: Int!
  avgHr: Int!
  avgPower: Int!
  avgSpeed: Int!
  createdAt: ISO8601DateTime!
  description: String!
  distance: Int!
  duration: Int!
  elevation: Int!
  id: ID!
  mapImgDark: String!
  mapImgLight: String!
  maxCadence: Int!
  maxElev: Int!
  maxHr: Int!
  maxPower: Int!
  maxSpeed: Int!
  minElev: Int!
  minHr: Int!
  polyline: String!
  startTime: Int!
  title: String!
  updatedAt: ISO8601DateTime!
  user: User!
}

type ActivityComment {
  comment: String!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  addActivityComment(activityId: ID!, comment: String!, userId: ID!): ActivityComment
  deleteActivityComment(commentId: ID!): ActivityComment

  """
  Login for users
  """
  login(email: String!, password: String!): User

  """
  Logout for users
  """
  logout: Boolean

  """
  Unlock the user account
  """
  resendUnlockInstructions(email: String!): Boolean!

  """
  Set the new password
  """
  resetPassword(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): Boolean

  """
  Send password reset instructions to users email
  """
  sendResetPasswordInstructions(email: String!): Boolean

  """
  Sign up for users
  """
  signUp(attributes: UserInput!): User

  """
  JWT token login
  """
  tokenLogin: User

  """
  Unlock the user account
  """
  unlock(unlockToken: String!): Boolean!

  """
  Update user img
  """
  updateImg(img: Upload!): User

  """
  Update user measurement preference
  """
  updateMeasurementPreference(measurementPreference: String): User

  """
  Update user name
  """
  updateName(firstName: String, lastName: String): User

  """
  Update user
  """
  updateUser(password: String, passwordConfirmation: String): User
  upload(description: String!, fitFile: Upload!, title: String!, userId: ID!): Activity
}

type Query {
  """
  Returns the activities belonging to the specified user_id
  """
  activitiesByUserId(userId: ID!): [Activity!]

  """
  Returns the activity for a given id
  """
  activityById(id: ID!): Activity!

  """
  Returns the current user
  """
  me: User

  """
  Returns the activities for the previous month
  """
  monthlyActivity: [Activity!]!

  """
  Returns the current user's activities
  """
  myActivities(limit: Int, offset: Int): [Activity!]!

  """
  Ping Pong
  """
  ping: String!
}

scalar Upload

type User {
  activityCount: Int
  createdAt: ISO8601DateTime!
  email: String
  firstName: String!
  id: ID!
  img: String!
  lastName: String!
  latestActivity: Activity
  measurementPreference: String!
  name: String!
  strokeColor: String!
  token: String!
  updatedAt: ISO8601DateTime!
}

"""
Attributes to create a user.
"""
input UserInput {
  """
  Email of user
  """
  email: String!

  """
  Firstname of user
  """
  firstName: String!

  """
  Lastname of user
  """
  lastName: String!

  """
  Password of user
  """
  password: String!

  """
  Password confirmation
  """
  passwordConfirmation: String!
}